package com.primus.externals.stockist.dao;

import com.primus.abstracts.AbstractDAO;
import com.primus.abstracts.PrimusModel;
import com.primus.common.address.Address;
import com.primus.externals.stockist.model.StockistAssociation;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;
import com.primus.externals.stockist.model.Stockist;

import javax.persistence.Query;
import java.util.ArrayList;
import java.util.List;

/**
** Class Generated by Primus Auto code generator
**/
@Component
public class StockistDAO extends AbstractDAO{

  @Override
    public String getEntityClassName() {
        return  "Stockist";
    }

    @Override
    public Class getEntityClass() {
        return  Stockist.class;
    }


    public StockistAssociation getAssociation (int stockistId, int companyId )
    {
        Query query =  em.createQuery("from StockistAssociation where  company.id = :companyId and stockist.id = :stockistId " );
        query.setParameter("companyId", companyId);
        query.setParameter("stockistId", stockistId);
        List<StockistAssociation> lst = query.getResultList();
        if(!Utils.isNullList(lst)) {
            return lst.get(0);
        }
        return null;
    }


    public void createAssociation(StockistAssociation association)
    {
        em.merge(association) ;
    }

    public void updateAssociation(StockistAssociation association)
    {
        em.merge(association) ;
    }



    public List<PrimusModel> listData(String table, int from , int to , String whereCondition, String orderby, int companyId ) {
        Query query =  em.createQuery("from " + table   +  ((Utils.isNull(whereCondition))?"":whereCondition) +
                " " + ((Utils.isNull(orderby))?"": (" order by " + orderby) ) );
        query.setFirstResult(from);
        query.setMaxResults(to-from);
        List<PrimusModel> ans = query.getResultList();
        if(!Utils.isNull(ans)) {
            ans.forEach( model ->  {
                Stockist stockist  =(Stockist) model ;
                StockistAssociation association = getAssociation(stockist.getId(),companyId);
                if(association != null)
                    stockist.setAssociatedForCompany(association.getAssociated());
                else
                    stockist.setAssociatedForCompany(false);
            } );
        }

        return ans;

    }


   /* public List<PrimusModel> listData(String table, int from , int to , String whereCondition, String orderby, int companyId ) {
// left outer join  Stockist.address address  &&  address.city,address.phone ,
        Query query =  em.createQuery(" select Stockist.id, Stockist.code , Stockist.name,Stockist.contactPerson,   association.associated ,association.company.id " +
                "  from Stockist Stockist  left  join    Stockist.stockistAssociations association where association.company.id = " +  companyId + "     "  +  ((Utils.isNull(whereCondition))?"":whereCondition) +
                " " + ((Utils.isNull(orderby))?"": (" order by " + orderby) ) );
        query.setFirstResult(from);
        query.setMaxResults(to-from);
        List<Object[]> ans = query.getResultList();
        List<PrimusModel> results = new ArrayList<>();
        if(!Utils.isNull(ans)) {
            ans.forEach( objects ->  {
                int id = Integer.parseInt(String.valueOf(objects[0]));
                String associatedCompany = String.valueOf(objects[7]);
               // if(Utils.isNullString(associatedCompany) ||associatedCompany.equalsIgnoreCase(String.valueOf(companyId)) ) {
                    String code = String.valueOf(objects[1]);
                    String name = String.valueOf(objects[2]);
                    String contactPerson = String.valueOf(objects[3]);
                    String city = String.valueOf(objects[4]);
                    String phone = String.valueOf(objects[5]);
                    String associated = String.valueOf(objects[6]);
                    Stockist uiStockist = new Stockist();
                    uiStockist.setId(id);
                    uiStockist.setCode(code);
                    uiStockist.setName(name);
                    uiStockist.setContactPerson(contactPerson);
                    uiStockist.setAddress(new Address());
                    uiStockist.getAddress().setCity(city);
                    uiStockist.getAddress().setPhone(phone);
                    uiStockist.setAssociatedForCompany(Boolean.valueOf(associated));
                    results.add(uiStockist);
                //}


            } );
        }

        return results;
    }*/

}

