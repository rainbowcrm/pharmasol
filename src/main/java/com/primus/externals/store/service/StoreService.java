package com.primus.externals.store.service;

import com.primus.abstracts.AbstractDAO;
import com.primus.abstracts.AbstractService;
import com.primus.admin.region.model.Location;
import com.primus.common.CommonUtil;
import com.primus.common.Logger;
import com.primus.common.ProductContext;
import com.primus.common.company.model.Company;
import com.primus.externals.store.model.Store;
import com.primus.externals.store.model.StoreAssociation;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.model.transaction.TransactionResult;
import com.techtrade.rads.framework.ui.components.SortCriteria;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import com.primus.abstracts.PrimusModel;
import com.primus.externals.store.dao.StoreDAO;
import sun.misc.BASE64Decoder;

import java.io.ByteArrayInputStream;
import java.util.List;


/**
** Class Generated by Primus Auto code generator
**/
@Component
@Transactional
public class StoreService extends AbstractService {


 @Autowired
 StoreDAO storeDAO ;

  @Override
     public AbstractDAO getDAO() {
         return storeDAO;
     }


      @Override
     protected void collateBeforUpdate(PrimusModel newObject, PrimusModel oldObject) {
         Store newObj = (Store) newObject;
         Store oldObj = (Store) oldObject;
         /*TransactionUpdateDelta delta = formDelta(oldObj.getPayScaleSplits(), ((PayScale) newObj).getPayScaleSplits()) ;
         payScale.getPayScaleSplits().addAll((List<PayScaleSplit>)delta.getDeletedRecords());*/
     }

    public StoreAssociation getStoreAssociation (int storeId,  ProductContext context)
    {
        StoreAssociation association = storeDAO.getAssociation(storeId,context.getCompany().getId());
        return association ;
    }
     public List<RadsError> associateStore (int storeId, Location location , ProductContext context, boolean associated)
     {

         StoreAssociation association = storeDAO.getAssociation(storeId,context.getCompany().getId());
         if(association != null) {
             association.setAssociated(associated);
             association.setLocation(location);
             storeDAO.update(association);
         }else {
             Store store = (Store) getById(storeId);
             Company company =context.getCompany() ;
             StoreAssociation association1 =new StoreAssociation();
             association1.setAssociated(associated);
             association1.setCompany(company);
             association1.setLocation(location);
             association1.setStore(store);
             storeDAO.create(association1);
         }


         return null;

     }

    public List<RadsError> associateStore (StoreAssociation newAssociation , ProductContext context)
    {

        StoreAssociation association = storeDAO.getAssociation(newAssociation.getStore().getId(),context.getCompany().getId());
        if(association != null) {
            association.setAssociated(newAssociation.getAssociated());
            association.setLocation(newAssociation.getLocation());
            association.setDescription(newAssociation.getDescription());

            storeDAO.update(association);
        }else {
            Store store = (Store) getById(newAssociation.getStore().getId());
            Company company =context.getCompany() ;
            StoreAssociation association1 =new StoreAssociation();
            association1.setAssociated(newAssociation.getAssociated());
            association1.setCompany(company);
            association1.setLocation(newAssociation.getLocation());
            association1.setDescription(newAssociation.getDescription());
            association1.setStore(store);
            storeDAO.create(association1);
        }


        return null;

    }


    public long getTotalRecordCount(ProductContext context, String whereCondition) {
        StringBuffer additionalCondition = new StringBuffer();
        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" ");
        } else {
            additionalCondition = additionalCondition.append(whereCondition );
        }

        return getDAO().getTotalRecordCount(getDAO().getEntityClassName(), context, additionalCondition.toString());
    }

    public List<? extends PrimusModel> listData(int from, int to,
                                                String whereCondition, ProductContext context, SortCriteria sortCriteria) {
        return listData(getDAO().getEntityClassName(), from, to, whereCondition, null, context, sortCriteria);
    }

    public List<? extends PrimusModel> listData(String className, int from, int to,
                                                String whereCondition, String orderBy, ProductContext context, SortCriteria sortCriteria) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and company.id= " + context.getLoggedinCompany());
        }
        return storeDAO.listData(className, from, to, additionalCondition.toString(), orderBy,context.getLoggedinCompany());

    }

    public List<? extends PrimusModel> fetchAllActive(String whereCondition, String orderBy, ProductContext context) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where deleted = false and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and deleted = false and company.id= " + context.getLoggedinCompany());
        }
        return getDAO().fetchAllActive(getDAO().getEntityClassName(), additionalCondition.toString(), orderBy);

    }

    public List<? extends PrimusModel> fetchAllActive(String className,
                                                      String whereCondition, String orderBy, ProductContext context) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where deleted = false and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and deleted = false and company.id= " + context.getLoggedinCompany());
        }
        return getDAO().fetchAllActive(className, additionalCondition.toString(), orderBy);

    }

    public List<? extends PrimusModel> fetchAllLinked(String whereCondition, String orderBy, ProductContext context) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where deleted = false and associated = true and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and deleted = false and associated = true and company.id= " + context.getLoggedinCompany());
        }
        return getDAO().fetchAllActive("StoreAssociation", additionalCondition.toString(), orderBy);

    }



    private boolean uploadFile(Store object, ProductContext context)
    {
        if(Utils.isNullString(object.getFileName())) {
            if(!Utils.isNullString(object.getFileWithoutLink()))
                object.setPhoto(object.getFileWithoutLink());
            return false;
        }
        String fileExtn = CommonUtil.getFileExtn(object.getFileName());
        String fileName =  new String("str" + object.getCode());
        fileName.replace(" ", "_")    ;
        //	doc.setDocName(fileName +  "."  + fileExtn);
        object.setPhoto( "//" +  context.getLoggedinCompanyCode() +  "//str//" + fileName +  "."  + fileExtn );
        //customer.setPhotoFile(fileName +  "."  + fileExtn );
        if(object.getImage() != null)
            CommonUtil.uploadFile(object.getImage(), fileName +  "."  + fileExtn  , context, "str");
        else{
            byte[] imageByte;
            try  {
                BASE64Decoder decoder = new BASE64Decoder();
                imageByte = decoder.decodeBuffer(object.getBase64Image());
                ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
                bis.close();
                CommonUtil.uploadFile(imageByte, fileName +  "."  + fileExtn  , context, "str");
            }catch(Exception ex) {
                Logger.logException("Error in uploading",this.getClass(),ex);
            }
        }

        return true;
    }

    @Override
    public TransactionResult create(PrimusModel object, ProductContext productContext) {
        uploadFile((Store) object,productContext);
        return super.create(object, productContext);
    }

    @Override
    public TransactionResult update(PrimusModel object, ProductContext productContext) {
        uploadFile((Store) object,productContext);
        return super.update(object, productContext);
    }


}