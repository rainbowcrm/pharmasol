package com.primus.externals.store.validator;

import com.primus.abstracts.AbstractValidator;
import com.primus.abstracts.CommonErrorCodes;
import com.primus.abstracts.PrimusBusinessModel;
import com.primus.abstracts.PrimusModel;
import com.primus.common.Logger;
import com.primus.common.ProductContext;
import com.primus.externals.store.model.StoreAppointmentPreference;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.util.ServiceLibrary;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import com.primus.externals.store.model.Store;


/**
** Class Generated by Primus Auto code generator
**/
@Component
public class StoreValidator extends AbstractValidator {

@Override
    public String getBusinessKeyField() {
        return "Name";
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        Store store = (Store) model;
        List<RadsError> results =new ArrayList<RadsError>();
                if(Utils.isNull(store.getCode  () ) ) {
            results.add( getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY,"code"));
        }

                if(Utils.isNull(store.getName  () ) ) {
            results.add( getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY,"Name"));
        }

        if(Utils.isNull(store.getAddress())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Address"));
        }else if (Utils.isNullString(store.getAddress().getAddress1())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Address1"));
        }else if (Utils.isNullString(store.getAddress().getPhone())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Phone"));
        }else if (Utils.isNullString(store.getAddress().getStreetName())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Street_Name"));
        }else if (Utils.isNullString(store.getAddress().getZipCode())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Zipcode"));
        }

        
        return results;

     }

     @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {
        return null;
    }

    @Override
    public List<RadsError> adaptToUI(PrimusModel model, ProductContext context) {
        Store object = (Store) model;
        String serverURL = ServiceLibrary.services().getApplicationManager().getDocServer();
        object.setFileWithLink(serverURL + object.getPhoto());
        object.setFileWithoutLink(object.getPhoto());
        if(!Utils.isNullCollection(object.getAppointmentPreferences())) {
            object.getAppointmentPreferences().forEach( preference -> {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
                String timeString = sdf.format(preference.getPreferredTime()) ;
                preference.setHhMM(timeString);
            } );
        }
        return  null ;
    }

    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
       super.adaptFromUI(model,context) ;
        Store object = (Store) model ;
        if(object.getAddress() != null)
            object.getAddress().setCompany(object.getCompany());
        if(object.getStoreAssociation() == null ) {
            object.setStoreAssociation(new StoreAssociation());
        }
        if(object.getStoreAssociation() != null ) {
            object.getStoreAssociation().setAssociated(true);
            object.getStoreAssociation().setCompany(object.getCompany());
            object.getStoreAssociation().setStore(object);
        }

        if(!Utils.isNullCollection(object.getAppointmentPreferences())) {
            List<StoreAppointmentPreference> preferences = new ArrayList<>() ;
            object.getAppointmentPreferences().forEach( preference -> {
                if(preference.getWeekday() >=0 ) {
                    try {
                        String selectedtime = preference.getHhMM();
                        preference.setPreferredTime(new SimpleDateFormat("HH:mm").parse(selectedtime));
                        preference.setCompany(object.getCompany());
                        preference.setDoctor(object);
                    }catch (Exception ex) {
                        Logger.logException("parse Error",this.getClass(),ex);
                    }
                    preferences.add(preference);
                }
            } );
            object.setAppointmentPreferences(preferences);

        }

        return null;
    }
}