package com.primus.externals.doctor.controller;

import com.primus.abstracts.AbstractListController;
import com.primus.common.CommonUtil;
import com.primus.common.FVConstants;
import com.primus.common.ServiceFactory;
import com.primus.externals.doctor.model.Doctor;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.techtrade.rads.framework.model.abstracts.ModelObject;
import com.techtrade.rads.framework.ui.abstracts.PageResult;
import com.techtrade.rads.framework.utils.Utils;


import javax.xml.ws.Service;
import java.util.List;
import java.util.Map;

/**
** Class Generated by Primus Auto code generator
**/
public class DoctorListController extends AbstractListController{

     @Override
       protected String getServiceName() {
           return "DoctorService";
       }


    @Override
    protected String getAddEditPageKey() {
        return "newdoctor";
    }

    @Override
    protected String getValidatorName() {
        return "DoctorValidator";
    }

    @Override
    public PageResult submit(List<ModelObject> list, String submitAction ) {
        DoctorService service = ServiceFactory.getDoctorService();
        if ("DEASSOCIATE".equalsIgnoreCase(submitAction)) {
            if (!Utils.isNullList(list)) {
                list.forEach(modelObject -> {
                    Doctor doctor = (Doctor) modelObject;
                    service.associateDoctor(doctor.getId(), null, getProductContext(), "ASSOCIATE".equalsIgnoreCase(submitAction) ? true : false);
                });
            }
        } else if ("ASSOCIATE".equalsIgnoreCase(submitAction)) {
            PageResult result = new PageResult();
            result.setNextPageKey("doctorAssociation");
            Doctor currentOne = (Doctor)list.get(0);
            currentOne = (Doctor)service.getById(currentOne.getId());
            DoctorAssociation association = service.getDoctorAssociation(currentOne.getId(),getProductContext());
            if(association == null) {
                association  =new DoctorAssociation();
                association.setDoctor(currentOne);

            }
            result.setObject(association);
            return result ;

        }
        return new PageResult();
    }
}