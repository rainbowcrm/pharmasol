package com.primus.externals.doctor.model;

import com.primus.abstracts.PrimusBusinessModel;
import com.primus.common.FiniteValue;
import com.primus.common.address.Address;
import com.techtrade.rads.framework.annotations.RadsPropertySet;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.util.Collection;

@Entity
@Table(name = "DOCTORS")
@AttributeOverrides({
        @AttributeOverride(name="ID", column=@Column(name="ID")),
        @AttributeOverride(name="createdDate", column=@Column(name="CREATED_DATE")),
        @AttributeOverride(name="createdBy", column=@Column(name="CREATED_BY")),
        @AttributeOverride(name="lastUpdateDate", column=@Column(name="LAST_UPDATED_DATE")),
        @AttributeOverride(name="lastUpdatedBy", column=@Column(name="LAST_UPDATED_BY")),
        @AttributeOverride(name="version", column=@Column(name="VERSION"))

})

/**
** Class Generated by Primus Auto code generator
**/
public class Doctor extends PrimusBusinessModel {


	String name ;

	@RadsPropertySet(isBK =  true )
	@Column(name  ="NAME")
	public String  getName ()
	{
		return name;
	}

	@RadsPropertySet(isBK =  true )
	public void setName ( String   val )
	{
		name  = val;
	}

	String qualification;

	@Column(name  ="QUALIFICATIONS")
	public String getQualification() {
		return qualification;
	}

	public void setQualification(String qualification) {
		this.qualification = qualification;
	}

	FiniteValue specialization;

	@ManyToOne(cascade=CascadeType.DETACH)
	@JoinColumn(name  ="SPECIALIZATION")
	public FiniteValue getSpecialization() {
		return specialization;
	}

	public void setSpecialization(FiniteValue specialization) {
		this.specialization = specialization;
	}

	String description ;

	
	@Column(name  ="DESCRIPTION")
	public String  getDescription ()
	{
		return description;
	}

	
	public void setDescription ( String   val )
	{
		description  = val;
	}

	Address address ;


	@OneToOne(cascade=CascadeType.ALL ,fetch = FetchType.LAZY )
	@JoinColumn(name  ="ADDRESS_ID")
	public Address  getAddress ()
	{
		return address;
	}


	public void setAddress ( Address   val )
	{
		address  = val;
	}


	String hospital;

	@Column(name  ="HOSPITAL")
	public String getHospital() {
		return hospital;
	}

	public void setHospital(String hospital) {
		this.hospital = hospital;
	}

	String alternatePhone;



	@Column(name  ="ALTERNATE_PHONE")
	public String getAlternatePhone() {
		return alternatePhone;
	}

	public void setAlternatePhone(String alternatePhone) {
		this.alternatePhone = alternatePhone;
	}

	String email;


	@Column(name  ="EMAIL")
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}


	String faceBookId;
	String gmailId;


	@Column(name  ="FACEBOOK_ID")
	public String getFaceBookId() {
		return faceBookId;
	}

	public void setFaceBookId(String faceBookId) {
		this.faceBookId = faceBookId;
	}

	@Column(name  ="GMAIL_ID")
	public String getGmailId() {
		return gmailId;
	}

	public void setGmailId(String gmailId) {
		this.gmailId = gmailId;
	}

	DoctorAssociation doctorAssociation ;

	@OneToOne(cascade= CascadeType.ALL, mappedBy = "doctor",fetch = FetchType.LAZY)
	public DoctorAssociation getDoctorAssociation() {
		return doctorAssociation;
	}

	public void setDoctorAssociation(DoctorAssociation doctorAssociation) {
		this.doctorAssociation = doctorAssociation;
	}

	/*@OneToMany(cascade= CascadeType.ALL, mappedBy = "doctor",fetch = FetchType.LAZY)
	public Collection<DoctorAssociation> getDoctorAssociations() {
		return doctorAssociations;
	}

	public void setDoctorAssociations(Collection<DoctorAssociation> doctorAssociations) {
		this.doctorAssociations = doctorAssociations;
	}*/

	Boolean associatedForCompany;

	@Transient
	public Boolean getAssociatedForCompany() {
		return associatedForCompany;
	}

	public void setAssociatedForCompany(Boolean associatedForCompany) {
		this.associatedForCompany = associatedForCompany;
	}
}