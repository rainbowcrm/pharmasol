package com.primus.admin.role.service;

import com.primus.abstracts.*;
import com.primus.admin.role.model.Role;
import com.primus.admin.role.model.RoleModule;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import com.primus.admin.role.dao.RoleDAO;

import java.util.ArrayList;
import java.util.Collection;


/**
** Class Generated by Primus Auto code generator
**/
@Component
@Transactional
public class RoleService extends AbstractService {


 @Autowired
 RoleDAO roleDAO ;

  @Override
     public AbstractDAO getDAO() {
         return roleDAO;
     }

    protected  void collateBeforUpdate(PrimusModel newObject, PrimusModel oldObject )
    {
        if(oldObject != null ) {
            Role oldRole = (Role) oldObject ;
            Role newRole = (Role) newObject;
            formDelta(oldRole.getRoleModules() , newRole.getRoleModules() ) ;
        }

    }


    private boolean hasSameKey(PrimusBusinessModel oldObject ,PrimusBusinessModel newObject )
    {
        RoleModule  oldModule = (RoleModule) oldObject ;
        RoleModule  newModule = (RoleModule) newObject ;
        if(oldModule.getModule().getCode().equalsIgnoreCase(newModule.getModule().getCode())) return true;
        else return false;
    }
    protected TransactionUpdateDelta formDelta(Collection<? extends  PrimusBusinessModel> oldList, Collection<? extends  PrimusBusinessModel> newList)
    {
        if(!Utils.isNullCollection(oldList))  {
            oldList.forEach( oldRecord ->  {
                PrimusBusinessModel findMatchByBK = newList.stream().filter(newRecord -> hasSameKey(oldRecord,newRecord)  ).findFirst().orElse(null);
                if(findMatchByBK != null) {
                    findMatchByBK.setId(oldRecord.getId());
                    findMatchByBK.setVersion(oldRecord.getVersion());
                }

            });
        }
        return  null;
    }


}