package com.primus.admin.role.validator;

import com.primus.abstracts.AbstractValidator;
import com.primus.abstracts.CommonErrorCodes;
import com.primus.abstracts.PrimusBusinessModel;
import com.primus.abstracts.PrimusModel;
import com.primus.common.ProductContext;
import com.primus.common.application.Module;
import com.primus.admin.role.model.RoleModule;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import com.primus.admin.role.model.Role;


/**
** Class Generated by Primus Auto code generator
**/
@Component
public class RoleValidator extends AbstractValidator {

@Override
    public String getBusinessKeyField() {
        return "Role";
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        Role role = (Role) model;
        List<RadsError> results =new ArrayList<RadsError>();
        if(Utils.isNullString(role.getRole  () ) ) {
            results.add( getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY,"Role"));
        }
        if(Utils.isNullCollection(role.getRoleModules())) {
            results.add( getErrorforCode(context, CommonErrorCodes.ATLEAST_ONE_REQUIRED,"Module"));
        }

        
        return results;

     }

     @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {
        return null;
    }

    @Override
    public List<RadsError> adaptToUI(PrimusModel model, ProductContext context) {
        Role role =  (Role) model ;
        super.adaptToUI(model, context);
        if (!Utils.isNullCollection(role.getRoleModules()))  {
            List<RoleModule> adminModules =  role.getRoleModules().stream().filter( roleModule ->
                   roleModule.getModule().getCode().equalsIgnoreCase(Module.ADMIN)).collect(Collectors.toList());
            if(!Utils.isNullCollection(adminModules)) {
                role.setAdminAccess(adminModules.get(0).getAccessAllowed());
            }

            List<RoleModule> stkModuled =  role.getRoleModules().stream().filter( roleModule ->
                    roleModule.getModule().getCode().equalsIgnoreCase(Module.STOCKIST)).collect(Collectors.toList());
            if(!Utils.isNullCollection(stkModuled)) {
                role.setStockistAccess(stkModuled.get(0).getAccessAllowed());
            }

            List<RoleModule> financeModules =  role.getRoleModules().stream().filter( roleModule ->
                    roleModule.getModule().getCode().equalsIgnoreCase(Module.FINANCE)).collect(Collectors.toList());
            if(!Utils.isNullCollection(financeModules)) {
                role.setFinanceAccess(financeModules.get(0).getAccessAllowed());
            }

            List<RoleModule> agModules =  role.getRoleModules().stream().filter( roleModule ->
                    roleModule.getModule().getCode().equalsIgnoreCase(Module.AGENTPORTAL)).collect(Collectors.toList());
            if(!Utils.isNullCollection(agModules)) {
                role.setAgentAccess(agModules.get(0).getAccessAllowed());
            }

            List<RoleModule> operationsModules =  role.getRoleModules().stream().filter( roleModule ->
                    roleModule.getModule().getCode().equalsIgnoreCase(Module.OPERATIONS)).collect(Collectors.toList());
            if(!Utils.isNullCollection(operationsModules)) {
                role.setOperationsAccess(operationsModules.get(0).getAccessAllowed());
            }

            List<RoleModule> managerModules =  role.getRoleModules().stream().filter( roleModule ->
                    roleModule.getModule().getCode().equalsIgnoreCase(Module.MANAGERPORTAL)).collect(Collectors.toList());
            if(!Utils.isNullCollection(managerModules)) {
                role.setMgrPortalAccess(managerModules.get(0).getAccessAllowed());
            }


        }


        return null;
    }

    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
        Role role =  (Role) model ;
        super.adaptFromUI(model,context);
        if(true)  {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.ADMIN) ;
            roleModule.setRole(role);
            roleModule.setModule(module);
            roleModule.setCompany(role.getCompany());
            roleModule.setAccessAllowed(role.isAdminAccess());
            role.addRoleModule(roleModule);
        }

        if(true)  {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.AGENTPORTAL) ;
            roleModule.setRole(role);
            roleModule.setModule(module);
            roleModule.setCompany(role.getCompany());
            roleModule.setAccessAllowed(role.isAgentAccess());
            role.addRoleModule(roleModule);
        }

        if(true)  {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.FINANCE) ;
            roleModule.setRole(role);
            roleModule.setModule(module);
            roleModule.setCompany(role.getCompany());
            roleModule.setAccessAllowed(role.isFinanceAccess());
            role.addRoleModule(roleModule);
        }

        if(true)  {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.STOCKIST) ;
            roleModule.setRole(role);
            roleModule.setModule(module);
            roleModule.setCompany(role.getCompany());
            roleModule.setAccessAllowed(role.isStockistAccess());
            role.addRoleModule(roleModule);

        }

        if(true)  {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.OPERATIONS) ;
            roleModule.setRole(role);
            roleModule.setModule(module);
            roleModule.setCompany(role.getCompany());
            roleModule.setAccessAllowed(role.isOperationsAccess());
            role.addRoleModule(roleModule);
        }
        if(true) {
            RoleModule roleModule = new RoleModule();
            Module module = new Module(Module.MANAGERPORTAL) ;
            roleModule.setRole(role);
            roleModule.setCompany(role.getCompany());
            roleModule.setModule(module);
            roleModule.setAccessAllowed(role.isMgrPortalAccess());
            role.addRoleModule(roleModule);
        }

       return null;
    }
}