package com.primus.admin.reasoncode.model;

import com.primus.abstracts.PrimusBusinessModel;
import com.primus.common.FiniteValue;
import com.techtrade.rads.framework.annotations.RadsPropertySet;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;

@Entity
@Table(name = "REASON_CODES")
@AttributeOverrides({
        @AttributeOverride(name="ID", column=@Column(name="ID")),
        @AttributeOverride(name="createdDate", column=@Column(name="CREATED_DATE")),
        @AttributeOverride(name="createdBy", column=@Column(name="CREATED_BY")),
        @AttributeOverride(name="lastUpdateDate", column=@Column(name="LAST_UPDATED_DATE")),
        @AttributeOverride(name="lastUpdatedBy", column=@Column(name="LAST_UPDATED_BY")),
        @AttributeOverride(name="version", column=@Column(name="VERSION"))

})

/**
** Class Generated by Primus Auto code generator
**/
public class ReasonCode extends PrimusBusinessModel {

	String reason ;

	@RadsPropertySet(isBK =  true )
	@Column(name  ="REASON")
	public String  getReason ()
	{
		return reason;
	}

	@RadsPropertySet(isBK =  true )
	public void setReason ( String   val )
	{
		reason  = val;
	}

	String description ;

	
	@Column(name  ="DESCRIPTION")
	public String  getDescription ()
	{
		return description;
	}

	
	public void setDescription ( String   val )
	{
		description  = val;
	}

	FiniteValue reasonType ;

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	@ManyToOne(cascade=CascadeType.DETACH)
	@JoinColumn(name  ="REASON_TYPE")
	public FiniteValue  getReasonType ()
	{
		return reasonType;
	}

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	public void setReasonType ( FiniteValue   val )
	{
		reasonType  = val;
	}

	FiniteValue factorType ;

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	@ManyToOne(cascade=CascadeType.DETACH)
	@JoinColumn(name  ="FACTOR_TYPE")
	public FiniteValue  getFactorType ()
	{
		return factorType;
	}

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	public void setFactorType ( FiniteValue   val )
	{
		factorType  = val;
	}

	FiniteValue Orientation ;

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	@ManyToOne(cascade=CascadeType.DETACH)
	@JoinColumn(name  ="ORIENTATION")
	public FiniteValue  getOrientation ()
	{
		return Orientation;
	}

	@RadsPropertySet(useBKForJSON =  true, useBKForMap = true, useBKForXML = true)
	public void setOrientation ( FiniteValue   val )
	{
		Orientation  = val;
	}




}