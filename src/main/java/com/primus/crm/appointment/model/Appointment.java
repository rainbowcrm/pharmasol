package com.primus.crm.appointment.model;

import com.primus.abstracts.PrimusBusinessModel;
import com.primus.admin.reasoncode.model.ReasonCode;
import com.primus.admin.region.model.Location;
import com.primus.common.FVConstants;
import com.primus.common.FiniteValue;
import com.primus.common.user.model.User;
import com.primus.externals.doctor.model.Doctor;
import com.primus.externals.stockist.model.Stockist;
import com.primus.externals.store.model.Store;
import com.techtrade.rads.framework.annotations.RadsPropertySet;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

@Entity
@Table(name = "APPOINTMENTS")
@AttributeOverrides({
        @AttributeOverride(name = "ID", column = @Column(name = "ID")),
        @AttributeOverride(name = "createdDate", column = @Column(name = "CREATED_DATE")),
        @AttributeOverride(name = "createdBy", column = @Column(name = "CREATED_BY")),
        @AttributeOverride(name = "lastUpdateDate", column = @Column(name = "LAST_UPDATED_DATE")),
        @AttributeOverride(name = "lastUpdatedBy", column = @Column(name = "LAST_UPDATED_BY")),
        @AttributeOverride(name = "version", column = @Column(name = "VERSION"))

})

/**
 ** Class Generated by Primus Auto code generator
 **/
public class Appointment extends PrimusBusinessModel {

    int hh;
    int mm;
    ReasonCode cancelReasonAgent;

    ReasonCode cancelReasonManager;

    String previousFeedBack;

    Collection<PromotedItem> promotedItems ;

    String docNo;

    @RadsPropertySet(isBK = true)
    @Column(name = "DOC_NO")
    public String getDocNo() {
        return docNo;
    }

    @RadsPropertySet(isBK = true)
    public void setDocNo(String val) {
        docNo = val;
    }

    AppointmentTemplate template;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "TEMPLATE_ID")
    public AppointmentTemplate getTemplate() {
        return template;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setTemplate(AppointmentTemplate val) {
        template = val;
    }

    FiniteValue partyType;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "APPT_PARTY_TYPE")
    public FiniteValue getPartyType() {
        return partyType;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setPartyType(FiniteValue val) {
        partyType = val;
    }

    Location location;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "LOCATION_ID")
    public Location getLocation() {
        return location;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setLocation(Location val) {
        location = val;
    }

    Stockist stockist;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "STOCKIST_ID")
    public Stockist getStockist() {
        return stockist;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setStockist(Stockist val) {
        stockist = val;
    }

    Store store;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "STORE_ID")
    public Store getStore() {
        return store;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setStore(Store val) {
        store = val;
    }

    Doctor doctor;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "DOCTOR_ID")
    public Doctor getDoctor() {
        return doctor;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setDoctor(Doctor val) {
        doctor = val;
    }

    User agent;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "AGENT_USER_ID")
    public User getAgent() {
        return agent;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setAgent(User val) {
        agent = val;
    }

    Date apptDate;


    @Column(name = "APPT_DATE")
    public Date getApptDate() {
        return apptDate;
    }


    public void setApptDate(Date val) {
        apptDate = val;
    }

    @Transient
    public String getDateString() {
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        return format.format(apptDate);

    }


    Date apptTime;


    @Column(name = "APPT_TIME")
    public Date getApptTime() {
        return apptTime;
    }


    public void setApptTime(Date val) {
        apptTime = val;
    }

    FiniteValue status;

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "APPT_STATUS")
    public FiniteValue getStatus() {
        return status;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    public void setStatus(FiniteValue val) {
        status = val;
    }

    String discussion;


    @Column(name = "DISCUSSION")
    public String getDiscussion() {
        return discussion;
    }


    public void setDiscussion(String val) {
        discussion = val;
    }

    String description;


    @Column(name = "DESCRIPTION")
    public String getDescription() {
        return description;
    }


    public void setDescription(String val) {
        description = val;
    }


    @Transient
    public String getPartyName() {
        Appointment appointment = this;
        if (FVConstants.EXTERNAL_PARTY.STOCKIST.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getStockist().getName() ;

        }
        if (FVConstants.EXTERNAL_PARTY.STORE.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getStore().getName() ;

        }
        if (FVConstants.EXTERNAL_PARTY.DOCTOR.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getDoctor().getName() ;

        }
        return "";
    }


    @Transient
    public String getPartyNameWithType() {
        Appointment appointment = this;
        if (FVConstants.EXTERNAL_PARTY.STOCKIST.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getStockist().getName()  + " [Stockist]";

        }
        if (FVConstants.EXTERNAL_PARTY.STORE.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getStore().getName() + " [Chemist]";

        }
        if (FVConstants.EXTERNAL_PARTY.DOCTOR.equalsIgnoreCase(appointment.getPartyType().getCode())) {
            return appointment.getDoctor().getName() + " [Doctor]";

        }
        return "";
    }

    @Transient
    public int getHh() {
        return hh;
    }

    public void setHh(int hh) {
        this.hh = hh;
    }

    @Transient
    public int getMm() {
        return mm;
    }

    public void setMm(int mm) {
        this.mm = mm;
    }



    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "CANCEL_REASON_AGENT")
    public ReasonCode getCancelReasonAgent() {
        return cancelReasonAgent;
    }

    public void setCancelReasonAgent(ReasonCode cancelReasonAgent) {
        this.cancelReasonAgent = cancelReasonAgent;
    }

    @RadsPropertySet(useBKForJSON = true, useBKForMap = true, useBKForXML = true)
    @ManyToOne(cascade = CascadeType.DETACH)
    @JoinColumn(name = "CANCEL_REASON_MGR")
    public ReasonCode getCancelReasonManager() {
        return cancelReasonManager;
    }

    public void setCancelReasonManager(ReasonCode cancelReasonManager) {
        this.cancelReasonManager = cancelReasonManager;
    }

    @Column(name = "PREVIOUS_FEEDBACK")
    public String getPreviousFeedBack() {
        return previousFeedBack;
    }

    public void setPreviousFeedBack(String previousFeedBack) {
        this.previousFeedBack = previousFeedBack;
    }

    @OneToMany(cascade= CascadeType.ALL, mappedBy = "appointment")
    public Collection<PromotedItem> getPromotedItems() {
        return promotedItems;
    }

    public void setPromotedItems(Collection<PromotedItem> promotedItems) {
        this.promotedItems = promotedItems;
    }
}