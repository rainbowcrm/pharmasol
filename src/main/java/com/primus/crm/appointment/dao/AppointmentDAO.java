package com.primus.crm.appointment.dao;

import com.primus.abstracts.AbstractDAO;
import com.primus.abstracts.PrimusModel;
import com.primus.crm.appointment.model.PrescriptionSurvey;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;
import com.primus.crm.appointment.model.Appointment;

import javax.persistence.Query;
import java.util.Date;
import java.util.List;

/**
** Class Generated by Primus Auto code generator
**/
@Component
public class AppointmentDAO extends AbstractDAO{

  @Override
    public String getEntityClassName() {
        return  "Appointment";
    }

    @Override
    public Class getEntityClass() {
        return  Appointment.class;
    }

    public List<PrescriptionSurvey> getAllDoctorSurveys( int doctorId, int companyId, Date fromDate  )
    {
        Query query = em.createQuery("from  PrescriptionSurvey surver where doctor.id = :doctor  and company.id = :company and " +
                "  deleted =false and appointment.apptDate >= :fromDate ");
        query.setParameter("doctor", doctorId);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        List<PrescriptionSurvey> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllDoctorAppointments( int doctorId, int companyId, Date fromDate  )
    {
        Query query = em.createQuery("from  Appointment appointment where doctor.id = :doctor  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and status.code in ('CMPLTD','CLSD')");
        query.setParameter("doctor", doctorId);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        List<Appointment> ans = query.getResultList();
       return ans;

    }

    public List<Appointment> getAllStoreAppointments( int store, int companyId, Date fromDate  )
    {
        Query query = em.createQuery("from  Appointment appointment where store.id = :store  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and status.code in ('CMPLTD','CLSD') ");
        query.setParameter("store", store);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllStockistsAppointments( int stockist, int companyId, Date fromDate  )
    {
        Query query = em.createQuery("from  Appointment appointment where stockist.id = :stockist  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and status.code in ('CMPLTD','CLSD') ");
        query.setParameter("stockist", stockist);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllManagedAppointments( String managerUserId, int companyId, Date fromDate , Date toDate   )
    {
        Query query = em.createQuery("from  Appointment appointment where manager.userId = :managerUserId  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and apptDate <= :toDate  ");
        query.setParameter("managerUserId", managerUserId);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        query.setParameter("toDate", toDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllCompletedAppointmentsForLocation( int location, int companyId, Date fromDate , Date toDate   )
    {
        Query query = em.createQuery("from  Appointment appointment where location.id = :location  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and apptDate <= :toDate  and appointment.status.code in ('CMPLTD','CLSD') order by appointment.apptTime desc  ");
        query.setParameter("location", location);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        query.setParameter("toDate", toDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllRecentAppointmentsForLocation( int location, int companyId, Date fromDate , Date toDate   )
    {
        Query query = em.createQuery("from  Appointment appointment where location.id = :location  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and apptDate <= :toDate   order by appointment.apptTime asc  ");
        query.setParameter("location", location);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        query.setParameter("toDate", toDate);
        List<Appointment> ans = query.getResultList();
        return ans;
    }

    public List<Appointment> getAllManagedRecentAppointments( String managerUserId, int companyId, Date fromDate , Date toDate   )
    {
        Query query = em.createQuery("from  Appointment appointment where manager.userId = :managerUserId  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and apptDate <= :toDate  and appointment.status.code in ('CMPLTD','CLSD') order by appointment.apptTime desc  ");
        query.setParameter("managerUserId", managerUserId);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        query.setParameter("toDate", toDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }

    public List<Appointment> getAllAgentAppointments( String userId, int companyId, Date fromDate , Date toDate   )
    {
        Query query = em.createQuery("from  Appointment appointment where agent.userId = :agentUserId  and company.id = :company and " +
                "  deleted =false and apptDate >= :fromDate and apptDate <= :toDate  ");
        query.setParameter("agentUserId", userId);
        query.setParameter("company", companyId);
        query.setParameter("fromDate", fromDate);
        query.setParameter("toDate", toDate);
        List<Appointment> ans = query.getResultList();
        return ans;

    }


}

