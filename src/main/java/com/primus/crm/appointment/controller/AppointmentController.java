package com.primus.crm.appointment.controller;

import com.primus.abstracts.AbstractCRUDController;
import com.primus.abstracts.AbstractTransactionController;
import com.primus.common.CommonUtil;
import com.primus.common.FVConstants;
import com.primus.crm.appointment.model.Appointment;
import com.primus.crm.appointment.service.AppointmentService;
import com.techtrade.rads.framework.model.abstracts.ModelObject;
import com.techtrade.rads.framework.model.transaction.TransactionResult;
import com.techtrade.rads.framework.ui.abstracts.PageResult;;
import java.util.LinkedHashMap;
import java.util.Map;


/**
** Class Generated by Primus Auto code generator
**/
public class AppointmentController extends AbstractTransactionController{

    @Override
    protected String getServiceName() {
        return "AppointmentService";
    }


    @Override
    protected String getValidatorName() {
        return "AppointmentValidator";
    }

    private String prefixZero( int value )
    {
        return (value<10)?"0"+value:String.valueOf(value);
    }
    public Map<String, String> getHours() {
        Map<String, String> ans = new LinkedHashMap<String, String>() ;
        for (int i =0 ;  i< 24 ; i ++) {
            ans.put(String.valueOf(i),prefixZero(i));
        }
        return ans;
    }

    public Map<String, String> getCreateStatuses() {
        Map<String, String> ans = new LinkedHashMap<String, String>() ;
        Map<String, String> mp = CommonUtil.getFiniteValues(FVConstants.FV_APPOINTMENTSTATUS);
        mp.keySet().forEach( key -> {
            if (key.equalsIgnoreCase(FVConstants.APPT_STATUS.SCHEDULED) || key.equalsIgnoreCase(FVConstants.APPT_STATUS.PLANNED) ||
                    key.equalsIgnoreCase(FVConstants.APPT_STATUS.COMPLETED))
                ans.put(key,mp.get(key));
        });
        return ans;
    }

    public Map<String, String> getMinutes() {
        Map<String, String> ans = new LinkedHashMap<String, String>() ;
        ans.put("00","00");
        ans.put("15","15");
        ans.put("30","30");
        ans.put("45","45");
        return ans;

    }

    @Override
    public PageResult submit(ModelObject object, String actionParam) {
        if ("CANCEL_APPOINTMENT".equalsIgnoreCase(actionParam)) {
            AppointmentService service = (AppointmentService) getService();
            PageResult result = service.cancelAppointment((Appointment)object,getProductContext());
            if(result.getResult().equals(TransactionResult.Result.SUCCESS)) {
                result.setNextPageKey("appointments");
                return result ;
            }else
                return result ;
        }else if ("COMPLETE_APPOINTMENT".equalsIgnoreCase(actionParam)) {
            AppointmentService service = (AppointmentService) getService();
            PageResult result = service.completeAppointment((Appointment)object,getProductContext());
            if(result.getResult().equals(TransactionResult.Result.SUCCESS)) {
                result.setNextPageKey("appointments");
                return result ;
            }else
                return result ;
        }else if ("INITIATEVISIT".equalsIgnoreCase(actionParam)) {
            PageResult result = new PageResult();
            AppointmentService service = (AppointmentService) getService();
            service.initateAppointment((Appointment)object,getProductContext());
            result.setResult(TransactionResult.Result.SUCCESS);
            result.setObject(object);
            result.setNextPageKey("newadhocvisit");
            return result;

        }
        return super.submit(object, actionParam);
    }
}