package com.primus.crm.appointment.service;

import com.primus.abstracts.AbstractDAO;
import com.primus.abstracts.AbstractService;
import com.primus.common.ProductContext;
import com.primus.common.ServiceFactory;
import com.primus.crm.appointment.model.AppointmentTemplate;
import com.primus.crm.appointment.validator.AppointmentTemplateErrorCodes;
import com.primus.crm.appointment.validator.AppointmentTemplateValidator;
import com.techtrade.rads.framework.model.transaction.TransactionResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import com.primus.abstracts.PrimusModel;
import com.primus.crm.appointment.dao.AppointmentTemplateDAO;



/**
** Class Generated by Primus Auto code generator
**/
@Component
@Transactional
public class AppointmentTemplateService extends AbstractService {


 @Autowired
 AppointmentTemplateDAO appointmentTemplateDAO ;

  @Override
     public AbstractDAO getDAO() {
         return appointmentTemplateDAO;
     }


      @Override
     protected void collateBeforUpdate(PrimusModel newObject, PrimusModel oldObject) {
         AppointmentTemplate newObj = (AppointmentTemplate) newObject;
         AppointmentTemplate oldObj = (AppointmentTemplate) oldObject;
         /*TransactionUpdateDelta delta = formDelta(oldObj.getPayScaleSplits(), ((PayScale) newObj).getPayScaleSplits()) ;
         payScale.getPayScaleSplits().addAll((List<PayScaleSplit>)delta.getDeletedRecords());*/
     }



    private TransactionResult createInstances (AppointmentTemplate template,ProductContext productContext) {
        TransactionResult result = new TransactionResult();
        AppointmentTemplate savedwithPK = (AppointmentTemplate)getById(template.getId());
        if (savedwithPK != null && savedwithPK.getInstanceCreated() == false   ) {
            AppointmentService service = ServiceFactory.getAppointmentService();
            service.createBulkAppointments(savedwithPK, productContext);
            savedwithPK.setInstanceCreated(true);
            update(savedwithPK,productContext);
        } else {
            result.addError(AppointmentTemplateValidator.getErrorforCode(productContext, AppointmentTemplateErrorCodes.INSTANCEES_ALREADY_CREATED));
            result.setResult(TransactionResult.Result.FAILURE);
        }
        return result;
    }
}