package com.primus.crm.appointment.service;

import com.primus.abstracts.AbstractDAO;
import com.primus.abstracts.AbstractService;
import com.primus.common.FVConstants;
import com.primus.common.FiniteValue;
import com.primus.common.ProductContext;
import com.primus.crm.appointment.model.Appointment;
import com.primus.crm.appointment.model.AppointmentTemplate;
import com.primus.framework.nextup.NextUpGenerator;
import com.techtrade.rads.framework.model.transaction.TransactionResult;
import com.techtrade.rads.framework.ui.abstracts.PageResult;
import com.techtrade.rads.framework.ui.components.SortCriteria;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.primus.abstracts.PrimusModel;
import com.primus.crm.appointment.dao.AppointmentDAO;

import java.time.LocalDate;
import java.util.*;


/**
** Class Generated by Primus Auto code generator
**/
@Component
@Transactional
public class AppointmentService extends AbstractService {


 @Autowired
 AppointmentDAO appointmentDAO ;

  @Override
     public AbstractDAO getDAO() {
         return appointmentDAO;
     }


      @Override
     protected void collateBeforUpdate(PrimusModel newObject, PrimusModel oldObject) {
         Appointment newObj = (Appointment) newObject;
         Appointment oldObj = (Appointment) oldObject;

         /*TransactionUpdateDelta delta = formDelta(oldObj.getPayScaleSplits(), ((PayScale) newObj).getPayScaleSplits()) ;
         payScale.getPayScaleSplits().addAll((List<PayScaleSplit>)delta.getDeletedRecords());*/

     }

    private Appointment formSkeltonFromTemplate(AppointmentTemplate template, ProductContext context) {
      Appointment appointment = new Appointment();
      appointment.setLocation(template.getLocation());
      appointment.setDoctor(template.getDoctor());
      appointment.setStockist(template.getStockist());
      appointment.setStore(template.getStore());
      appointment.setPartyType(template.getPartyType());
      appointment.setApptTime(template.getAppointmentTime());
      appointment.setAgent(template.getAgent());
      appointment.setTemplate(template);
      appointment.setCompany(template.getCompany());
      appointment.setStatus(new FiniteValue(FVConstants.APPT_STATUS.PLANNED));

      return appointment ;

    }



    private void generateMonthlyAppointments(AppointmentTemplate template, ProductContext context) {
        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int apptDay = template.getDayforMonth();

        int curYear = startYear;
        int curMonth = startMonth;
        while ((curMonth <= endMonth) || (curYear < endYear)) {

            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,apptDay);

            Appointment appointment = formSkeltonFromTemplate(template, context);
            Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
            appointment.setApptDate(apptDate);
            String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
            appointment.setDocNo(no);
            create(appointment, context);
            curMonth++;
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
            }

        }


    }

    private boolean  isStartLesser (int startYear, int startMon , int startdayOfMonth, int endYear,int endMonth, int endDayofMonth)
    {
        if(startYear < endYear ) return true;
        else if (endYear < startYear) return false;
        else if(startMon < endMonth) return true ;
        else if (endMonth < startMon) return false;
        else if (startdayOfMonth <=endDayofMonth) return true;
        else return false;

    }



    private int getWeekofDay( int weekProduct ){

        if(weekProduct % 2 == 0) return 1;
        if(weekProduct % 3 == 0) return 2;
        if(weekProduct % 5 == 0) return 3;
        if(weekProduct % 7 == 0) return 4;
        if(weekProduct % 11 == 0) return 5;
        if(weekProduct % 13 == 0) return 6;
        if(weekProduct % 17 == 0) return 7;
        return  0;

    }

    private void generateWeeklyAppointments(AppointmentTemplate template, ProductContext context) {
        generateDailyAppointments(template,context) ;
    }

    private int getMonthEndDay(int year, int month)
    {
        if( (year % 4  == 0) && month == 2 )
            return 29;
        else if (month == 2)
            return 28;
        else if (month == 1 || month == 3  || month == 5 || month == 7 ||   month == 8  || month == 10 || month == 12  )
            return 31 ;
        else
            return 30;
    }

    private boolean isDaySelected(int product, int dayOfWeek) {
        switch (dayOfWeek) {
            case 1 : return ((product % 2)== 0 );
            case 2 : return ((product % 3)== 0 );
            case 3 : return ((product % 5)== 0 );
            case 4 : return ((product % 7)== 0 );
            case 5 : return ((product % 11)== 0 );
            case 6 : return ((product % 13)== 0 );
            case 7 : return ((product % 17)== 0 );

        }
        return false;
    }

    private void generateDailyAppointments(AppointmentTemplate template, ProductContext context) {

        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int startDay =startDate.getDayOfMonth() ;
        int endDay = endDate.getDayOfMonth();



        int curYear = startYear;
        int curMonth = startMonth;
        int curDay = startDay;

        while (isStartLesser(curYear,curMonth,startDay,endYear,endMonth,endDay))  {
            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,curDay);
            int weekDays = template.getWeekDays() ;
            int dayOfWeek =  apptLocalDate.getDayOfWeek().getValue() ;
            if (isDaySelected(weekDays,dayOfWeek)) {
                Appointment appointment = formSkeltonFromTemplate(template, context);
                Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
                appointment.setApptDate(apptDate);
                String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
                appointment.setDocNo(no);
                create(appointment, context);
            }
            int monthEndDay = getMonthEndDay(curYear, curMonth) ;
            curDay  ++ ;
            if (curDay > monthEndDay) {
                curDay =1;
                curMonth ++;
            }
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
                curDay = 1 ;
            }


        }


    }

    private void generateBiWeeklyAppointments(AppointmentTemplate template, ProductContext context) {

        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int startDay =startDate.getDayOfMonth() ;
        int endDay = endDate.getDayOfMonth();



        int curYear = startYear;
        int curMonth = startMonth;
        int curDay = startDay;

        while (isStartLesser(curYear,curMonth,startDay,endYear,endMonth,endDay))  {
            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,curDay);
            int weekDays = template.getWeekDays() ;
            int dayOfWeek =  apptLocalDate.getDayOfWeek().getValue() ;
            if (isDaySelected(weekDays,dayOfWeek)) {
                Appointment appointment = formSkeltonFromTemplate(template, context);
                Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
                appointment.setApptDate(apptDate);
                String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
                appointment.setDocNo(no);
                create(appointment, context);
                curDay +=13;
            }
            int monthEndDay = getMonthEndDay(curYear, curMonth) ;
            curDay  ++ ;
            if (curDay > monthEndDay) {
                curDay =1;
                curMonth ++;
            }
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
                curDay = 1 ;
            }


        }


    }

    @Transactional(propagation = Propagation.REQUIRED)
    public void createBulkAppointments(AppointmentTemplate template, ProductContext context)
     {
        if(template.getPattern().equals(FVConstants.DATE_PATTERN.MONTHLY)) {
            generateMonthlyAppointments(template,context);
        } else if(template.getPattern().equals(FVConstants.DATE_PATTERN.WEEKLY)) {
            generateWeeklyAppointments(template,context);
        }else if(template.getPattern().equals(FVConstants.DATE_PATTERN.BIWEEKLY)) {
            generateBiWeeklyAppointments(template,context);
        }else if(template.getPattern().equals(FVConstants.DATE_PATTERN.DAILY)) {
            generateDailyAppointments(template,context);
        }

     }

    public String getOrderByCondition (SortCriteria sortCriteria)
    {
        StringBuffer buffer = new StringBuffer();
        if(sortCriteria == null || Utils.isNullString(sortCriteria.getFieldName()) )
            return " ORDER BY APPT_DATE ASC ";
        else
            return  " ORDER BY " +  sortCriteria.getFieldName() + " " + ( (sortCriteria.getDirection().equals(SortCriteria.DIRECTION.ASCENDING))?"ASC":"DESC");

    }

    public long getTotalRecordCount(ProductContext context, String whereCondition) {
        StringBuffer additionalCondition = new StringBuffer();
   /*     boolean allowAllDiv = CommonUtil.allowAllDivisionAccess(context);
        Metadata metadata = CommonUtil.getMetaDataforClass(getTableName());
        if (Utils.isNullString(whereCondition) ){
            additionalCondition = additionalCondition.append(" where company.id = " +  context.getLoggedinCompany()) ;
        }else {
            additionalCondition = additionalCondition.append(whereCondition +  " and company.id= " +  context.getLoggedinCompany()) ;
        }
        if (!allowAllDiv && metadata != null && metadata.isDivisionSpecific()) {
            additionalCondition = additionalCondition.append(" and division.id = "  +  context.getLoggedInUser().getDivision().getId());
        }*/

        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and company.id= " + context.getLoggedinCompany());
        }

        return getDAO().getTotalRecordCount(getDAO().getEntityClassName(), context, additionalCondition.toString());
    }

    public List<? extends PrimusModel> listData(int from, int to,
                                                String whereCondition, ProductContext context, SortCriteria sortCriteria) {
        return listData(getDAO().getEntityClassName(), from, to, whereCondition, null, context, sortCriteria);
    }

    public List<? extends PrimusModel> listData(String className, int from, int to,
                                                String whereCondition, String orderBy, ProductContext context, SortCriteria sortCriteria) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        String accessCondition = " agent.userId = '"+ context.getUser()+ "'" ;
        if ( context.getPageAccessCode() != null && context.getPageAccessCode().contains("MGR"))
            accessCondition = " template is not null and  template.manager.userId = '"+ context.getUser()+ "'" ;

        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where  "+  accessCondition +"  and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition +  accessCondition + "  and company.id= " + context.getLoggedinCompany());
        }
        additionalCondition.append(getOrderByCondition(sortCriteria));

        return getDAO().listData(className, from, to, additionalCondition.toString(), null);

    }


    public PageResult cancelAppointment(Appointment appointment, ProductContext context)
    {
        Appointment app = (Appointment)getById(appointment.getId()) ;
        PageResult result = new PageResult() ;
        if(FVConstants.APPT_STATUS.PENDING.equalsIgnoreCase(app.getStatus().getCode()) ||
        FVConstants.APPT_STATUS.SCHEDULED.equalsIgnoreCase(app.getStatus().getCode()) ) {
                app.setStatus(new FiniteValue(FVConstants.APPT_STATUS.CANCELLED));
                app.setCancelReasonAgent(appointment.getCancelReasonAgent());
                update(app,context) ;
        }else {
            result.setResult(TransactionResult.Result.FAILURE);

        }
        return result;

    }


}