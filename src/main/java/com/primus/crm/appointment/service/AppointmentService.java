package com.primus.crm.appointment.service;

import com.primus.abstracts.*;
import com.primus.admin.region.model.Location;
import com.primus.common.*;
import com.primus.common.user.model.User;
import com.primus.crm.appointment.jdbc.AppointmentSQL;
import com.primus.crm.appointment.model.*;
import com.primus.crm.appointment.validator.AppointmentTemplateErrorCodes;
import com.primus.crm.appointment.validator.AppointmentTemplateValidator;
import com.primus.crm.appointment.validator.AppointmentValidator;
import com.primus.externals.doctor.model.Doctor;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.primus.externals.stockist.model.Stockist;
import com.primus.externals.stockist.model.StockistAssociation;
import com.primus.externals.stockist.service.StockistService;
import com.primus.externals.store.model.Store;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.externals.store.service.StoreService;
import com.primus.framework.nextup.NextUpGenerator;
import com.primus.merchandise.item.model.Item;
import com.primus.merchandise.item.service.ItemService;
import com.primus.merchandise.product.model.Product;
import com.techtrade.rads.framework.exceptions.RadsAuthenticationException;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.model.transaction.TransactionResult;
import com.techtrade.rads.framework.ui.abstracts.PageResult;
import com.techtrade.rads.framework.ui.components.SortCriteria;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.primus.crm.appointment.dao.AppointmentDAO;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;


/**
** Class Generated by Primus Auto code generator
**/
@Component
@Transactional
public class AppointmentService extends AbstractService {


 @Autowired
 GeneralSQL generalSQL ;

 @Autowired
 AppointmentDAO appointmentDAO ;

 @Autowired
 AppointmentSQL appointmentSQL;

 @Autowired
 AppointmentValidator appointmentValidator ;

  @Override
     public AbstractDAO getDAO() {
         return appointmentDAO;
     }


      @Override
     protected void collateBeforUpdate(PrimusModel newObject, PrimusModel oldObject) {
         Appointment newObj = (Appointment) newObject;
         Appointment oldObj = (Appointment) oldObject;

          if(oldObject !=null &&  !Utils.isNullCollection(oldObj.getPromotedItems())) {
              TransactionUpdateDelta delta = formDelta(oldObj.getPromotedItems(), ((Appointment) newObj).getPromotedItems());
              newObj.getPromotedItems().addAll((List<PromotedItem>) delta.getDeletedRecords());

              TransactionUpdateDelta delta1 = formDelta(oldObj.getPrescriptionSurveys(), ((Appointment) newObj).getPrescriptionSurveys());
              newObj.getPrescriptionSurveys().addAll((List<PrescriptionSurvey>) delta1.getDeletedRecords());

              TransactionUpdateDelta delta2 = formDelta(oldObj.getOrderLines(), ((Appointment) newObj).getOrderLines());
              newObj.getOrderLines().addAll((List<StoreVisitOrderLine>) delta2.getDeletedRecords());

              TransactionUpdateDelta delta3 = formDelta(oldObj.getStockistVisitOrderLines(), ((Appointment) newObj).getStockistVisitOrderLines());
              newObj.getStockistVisitOrderLines().addAll((List<StockistVisitOrderLine>) delta3.getDeletedRecords());


          }
         /*TransactionUpdateDelta delta = formDelta(oldObj.getPayScaleSplits(), ((PayScale) newObj).getPayScaleSplits()) ;
         payScale.getPayScaleSplits().addAll((List<PayScaleSplit>)delta.getDeletedRecords());*/

     }

    public PrimusModel getById(Object PK) {
        PrimusModel model = getDAO().getById(PK);
        if (model != null) {
            getPreviousFeedBack((Appointment)model );
        }
        return model ;
    }

    public  void getPreviousFeedBack(Appointment appointment)
    {
        String partyType = appointment.getPartyType().getCode();
        String lastFeedBack  = "";
        PastAppointment pastAppointment =null;
        if(FVConstants.EXTERNAL_PARTY.DOCTOR.equalsIgnoreCase(partyType)) {
            pastAppointment=appointmentSQL.getLastAppointment(appointment.getId(), partyType, appointment.getDoctor().getId());
        } else if(FVConstants.EXTERNAL_PARTY.STOCKIST.equalsIgnoreCase(partyType)) {
            pastAppointment=appointmentSQL.getLastAppointment(appointment.getId(), partyType, appointment.getStockist().getId());
        }else if(FVConstants.EXTERNAL_PARTY.STORE.equalsIgnoreCase(partyType)) {
            pastAppointment=appointmentSQL.getLastAppointment(appointment.getId(), partyType, appointment.getStore().getId());
        }
        appointment.setPastAppointment(pastAppointment);
    }


    private Appointment formSkeltonFromTemplate(AppointmentTemplate template, ProductContext context) {
      Appointment appointment = new Appointment();
      appointment.setLocation(template.getLocation());
      appointment.setDoctor(template.getDoctor());
      appointment.setDuration(template.getDuration());
      appointment.setStockist(template.getStockist());
      appointment.setStore(template.getStore());
      appointment.setPartyType(template.getPartyType());
      appointment.setApptTime(template.getAppointmentTime());
      appointment.setAgent(template.getAgent());
      appointment.setManager(template.getManager());

      appointment.setTemplate(template);
      appointment.setCompany(template.getCompany());
      appointment.setStatus(new FiniteValue(FVConstants.APPT_STATUS.PLANNED));

      return appointment ;

    }



    private void generateMonthlyAppointments(AppointmentTemplate template, ProductContext context) {
        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int apptDay = template.getDayforMonth();

        int curYear = startYear;
        int curMonth = startMonth;
        while ((curMonth <= endMonth) || (curYear < endYear)) {

            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,apptDay);

            Appointment appointment = formSkeltonFromTemplate(template, context);
            Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
            appointment.setApptDate(apptDate);
            String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
            appointment.setDocNo(no);
            create(appointment, context);
            curMonth++;
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
            }

        }


    }

    private boolean  isStartLesser (int startYear, int startMon , int startdayOfMonth, int endYear,int endMonth, int endDayofMonth)
    {
        if(startYear < endYear ) return true;
        else if (endYear < startYear) return false;
        else if(startMon < endMonth) return true ;
        else if (endMonth < startMon) return false;
        else if (startdayOfMonth <=endDayofMonth) return true;
        else return false;

    }



    private int getWeekofDay( int weekProduct ){

        if(weekProduct % 2 == 0) return 1;
        if(weekProduct % 3 == 0) return 2;
        if(weekProduct % 5 == 0) return 3;
        if(weekProduct % 7 == 0) return 4;
        if(weekProduct % 11 == 0) return 5;
        if(weekProduct % 13 == 0) return 6;
        if(weekProduct % 17 == 0) return 7;
        return  0;

    }

    private void generateWeeklyAppointments(AppointmentTemplate template, ProductContext context) {
        generateDailyAppointments(template,context) ;
    }

    private int getMonthEndDay(int year, int month)
    {
        if( (year % 4  == 0) && month == 2 )
            return 29;
        else if (month == 2)
            return 28;
        else if (month == 1 || month == 3  || month == 5 || month == 7 ||   month == 8  || month == 10 || month == 12  )
            return 31 ;
        else
            return 30;
    }

    private boolean isDaySelected(int product, int dayOfWeek) {
        switch (dayOfWeek) {
            case 1 : return ((product % 2)== 0 );
            case 2 : return ((product % 3)== 0 );
            case 3 : return ((product % 5)== 0 );
            case 4 : return ((product % 7)== 0 );
            case 5 : return ((product % 11)== 0 );
            case 6 : return ((product % 13)== 0 );
            case 7 : return ((product % 17)== 0 );

        }
        return false;
    }

    private void generateDailyAppointments(AppointmentTemplate template, ProductContext context) {

        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int startDay =startDate.getDayOfMonth() ;
        int endDay = endDate.getDayOfMonth();



        int curYear = startYear;
        int curMonth = startMonth;
        int curDay = startDay;

        while (isStartLesser(curYear,curMonth,startDay,endYear,endMonth,endDay))  {
            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,curDay);
            int weekDays = template.getWeekDays() ;
            int dayOfWeek =  apptLocalDate.getDayOfWeek().getValue() ;
            if (isDaySelected(weekDays,dayOfWeek)) {
                Appointment appointment = formSkeltonFromTemplate(template, context);
                Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
                appointment.setApptDate(apptDate);
                String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
                appointment.setDocNo(no);
                create(appointment, context);
            }
            int monthEndDay = getMonthEndDay(curYear, curMonth) ;
            curDay  ++ ;
            if (curDay > monthEndDay) {
                curDay =1;
                curMonth ++;
            }
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
                curDay = 1 ;
            }


        }


    }

    private void generateBiWeeklyAppointments(AppointmentTemplate template, ProductContext context) {

        LocalDate endDate = template.getEndAt().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();
        LocalDate startDate = template.getStartFrom().toInstant().atZone(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toLocalDate();

        int endYear = endDate.getYear();
        int startYear = startDate.getYear();

        int endMonth = endDate.getMonth().getValue();
        int startMonth = startDate.getMonth().getValue();

        int startDay =startDate.getDayOfMonth() ;
        int endDay = endDate.getDayOfMonth();



        int curYear = startYear;
        int curMonth = startMonth;
        int curDay = startDay;

        while (isStartLesser(curYear,curMonth,startDay,endYear,endMonth,endDay))  {
            LocalDate apptLocalDate =LocalDate.of(curYear,curMonth,curDay);
            int weekDays = template.getWeekDays() ;
            int dayOfWeek =  apptLocalDate.getDayOfWeek().getValue() ;
            if (isDaySelected(weekDays,dayOfWeek)) {
                Appointment appointment = formSkeltonFromTemplate(template, context);
                Date apptDate = Date.from(apptLocalDate.atStartOfDay(TimeZone.getTimeZone("Asia/Calcutta").toZoneId()).toInstant());
                appointment.setApptDate(apptDate);
                String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, template.getLocation().getRegion(), appointment.getApptDate());
                appointment.setDocNo(no);
                create(appointment, context);
                curDay +=13;
            }
            int monthEndDay = getMonthEndDay(curYear, curMonth) ;
            curDay  ++ ;
            if (curDay > monthEndDay) {
                curDay =1;
                curMonth ++;
            }
            if (curMonth > 12) {
                curMonth = 1;
                curYear++;
                curDay = 1 ;
            }


        }


    }

    @Transactional(propagation = Propagation.REQUIRED)
    public void createBulkAppointments(AppointmentTemplate template, ProductContext context)
     {
        if(template.getPattern().equals(FVConstants.DATE_PATTERN.MONTHLY)) {
            generateMonthlyAppointments(template,context);
        } else if(template.getPattern().equals(FVConstants.DATE_PATTERN.WEEKLY)) {
            generateWeeklyAppointments(template,context);
        }else if(template.getPattern().equals(FVConstants.DATE_PATTERN.BIWEEKLY)) {
            generateBiWeeklyAppointments(template,context);
        }else if(template.getPattern().equals(FVConstants.DATE_PATTERN.DAILY)) {
            generateDailyAppointments(template,context);
        }

     }

    public String getOrderByCondition (SortCriteria sortCriteria)
    {
        StringBuffer buffer = new StringBuffer();
        if(sortCriteria == null || Utils.isNullString(sortCriteria.getFieldName()) )
            return " ORDER BY APPT_DATE ASC ";
        else
            return  " ORDER BY " +  sortCriteria.getFieldName() + " " + ( (sortCriteria.getDirection().equals(SortCriteria.DIRECTION.ASCENDING))?"ASC":"DESC");

    }

    public long getTotalRecordCount(ProductContext context, String whereCondition) {
        StringBuffer additionalCondition = new StringBuffer();

        additionalCondition = additionalCondition.append(" ");
        String accessCondition = getAccessCondition(context) ;


        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where  "+  accessCondition +"  and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition +  accessCondition + "  and company.id= " + context.getLoggedinCompany());
        }
        //additionalCondition.append(getOrderByCondition(sortCriteria));

 /*       if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition + " and company.id= " + context.getLoggedinCompany());
        }
*/
        return getDAO().getTotalRecordCount(getDAO().getEntityClassName(), context, additionalCondition.toString());
    }

    public List<? extends PrimusModel> listData(int from, int to,
                                                String whereCondition, ProductContext context, SortCriteria sortCriteria) {
        return listData(getDAO().getEntityClassName(), from, to, whereCondition, null, context, sortCriteria);
    }


    private String getAccessCondition (ProductContext context)
    {
        StringBuffer accessCondition =  new StringBuffer(" agent.userId = '"+ context.getUser()+ "'" );
        if ( context.getPageAccessCode() != null && context.getPageAccessCode().contains("MGR"))
            accessCondition =  new StringBuffer("  manager.userId ='"+ context.getUser()+ "'  ") ;
        if (context.getPageAccessCode() != null &&  ( context.getPageAccessCode().equalsIgnoreCase("AGENT::APPT")  ||
                context.getPageAccessCode().equalsIgnoreCase("MGR::APPT") ) ){
            accessCondition.append( " and status.code in ('PNDG','PLND','SCHD')");
        }
        if (context.getPageAccessCode() != null &&
                context.getPageAccessCode().equalsIgnoreCase("MGR::CMPAPPT")  ){
            accessCondition.append( " and status.code in ('CMPLTD','CNCLD')");
        }

        if (context.getPageAccessCode() != null &&
                context.getPageAccessCode().equalsIgnoreCase("MGR::CLSDAPPT")  ){
            accessCondition.append( " and status.code in ('CLSD','CLSCNCLD')");
        }


        return accessCondition.toString() ;
    }
    public List<? extends PrimusModel> listData(String className, int from, int to,
                                                String whereCondition, String orderBy, ProductContext context, SortCriteria sortCriteria) {
        StringBuffer additionalCondition = new StringBuffer();
        additionalCondition = additionalCondition.append(" ");
        String accessCondition = getAccessCondition(context) ;


        if (Utils.isNullString(whereCondition)) {
            additionalCondition = additionalCondition.append(" where  "+  accessCondition +"  and company.id = " + context.getLoggedinCompany());
        } else {
            additionalCondition = additionalCondition.append(whereCondition +  accessCondition + "  and company.id= " + context.getLoggedinCompany());
        }
        additionalCondition.append(getOrderByCondition(sortCriteria));

        return getDAO().listData(className, from, to, additionalCondition.toString(), null);

    }

    public List<RadsError> initateAppointment(Appointment appointment, ProductContext context)
    {
        List<RadsError> results = new ArrayList<RadsError>();
        if(appointment.getLocation().getId() >0 ) {
            Location location = ServiceFactory.getLocation(appointment.getLocation(), context);
            appointment.setLocation(location);
        }
        User agent = CommonUtil.getUser(context.getUser());
        if (context.getPageAccessCode().equalsIgnoreCase("MGR::ADHOCAPPT")) {
            appointment.setManager(agent);
        }else{
            appointment.setAgent(agent);
            if (agent.getManagerUser() != null)
                appointment.setManager(agent.getManagerUser());
            else
                appointment.setManager(agent);
        }


        FiniteValue partyType = generalSQL.getFiniteValue(appointment.getPartyType().getCode()) ;
        appointment.setPartyType(partyType);

        if(FVConstants.EXTERNAL_PARTY.STOCKIST.equalsIgnoreCase(partyType.getCode())) {
            if (appointment.getStockist() != null) {
                StockistService service = ServiceFactory.getStockistService();
                List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + appointment.getStockist().getName() + "'", null, context);
                if (!Utils.isNullList(stockists)) {
                    StockistAssociation association = (StockistAssociation)stockists.get(0);
                    if (association.getLocation().getId() != appointment.getLocation().getId()) {
                        results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Stockist", association.getStockist().getName(),
                                association.getLocation().getName()));
                    }else
                                appointment.setStockist(stockists.get(0).getStockist());
                } else
                    results.add(AppointmentTemplateValidator.getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));

            }else {
                results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_MANDATORY_TYPEIS, "Stockist"));
            }
        }

        if(FVConstants.EXTERNAL_PARTY.STORE.equalsIgnoreCase(partyType.getCode())) {
            if (appointment.getStore() != null) {
                StoreService service = ServiceFactory.getStoreService();
                List<StoreAssociation> datas = (List<StoreAssociation>) service.fetchAllLinked(" where store.name ='" + appointment.getStore().getName() + "'", null, context);
                if (!Utils.isNullList(datas)) {
                    StoreAssociation association = (StoreAssociation)datas.get(0);
                    if (association.getLocation().getId() != appointment.getLocation().getId()) {
                        results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Store", association.getStore().getName(),
                                association.getLocation().getName()));
                    }else
                            appointment.setStore(datas.get(0).getStore());
                } else
                    results.add(AppointmentTemplateValidator.getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
            }else {
                results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_MANDATORY_TYPEIS, "Store"));
            }

        }
        if(FVConstants.EXTERNAL_PARTY.DOCTOR.equalsIgnoreCase(partyType.getCode())) {
            if (appointment.getDoctor() != null) {
                DoctorService service = ServiceFactory.getDoctorService();
                List<DoctorAssociation> datas = (List<DoctorAssociation>) service.fetchAllLinked(" where doctor.name ='" + appointment.getDoctor().getName() + "'", null, context);
                if (!Utils.isNullList(datas)) {
                    DoctorAssociation association = (DoctorAssociation)datas.get(0);
                    if (association.getLocation().getId() != appointment.getLocation().getId()) {
                        results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Doctor", association.getDoctor().getName(),
                                association.getLocation().getName()));
                    }else
                        appointment.setDoctor(datas.get(0).getDoctor());
                } else
                    results.add(AppointmentTemplateValidator.getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));
            }else {
                results.add(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_MANDATORY_TYPEIS, "Doctor"));
            }
        }
        if(Utils.isNullList(results))
            getPreviousFeedBack(appointment);



        return  results;
    }


    public PageResult completeAdhocAppointment(Appointment appointment, ProductContext context)
    {
        PageResult result = new PageResult();
        appointmentValidator.adaptFromUI(appointment,context) ;
        appointment.setStatus(new FiniteValue(FVConstants.APPT_STATUS.COMPLETED));
        appointment.setVisitCompletion(appointment.getApptDate());
        List <RadsError> errors =  appointmentValidator.validateForCreate(appointment,context,this);
        errors.addAll(appointmentValidator.completionValidation(appointment,context));

        if(Utils.isNullList(errors)) {

            create(appointment, context);
            result.setResult(TransactionResult.Result.SUCCESS);
            if(appointment.getScheduleNextAppointment().booleanValue() == true )  {
                createFollowupAppointment(appointment,context);
            }
        }else {
            result.setResult(TransactionResult.Result.FAILURE);
            result.setErrors(errors);
        }


        return result;
    }

    public PageResult scheduleAdhocAppointment(Appointment appointment, ProductContext context)
    {
        PageResult result = new PageResult();
        appointmentValidator.adaptFromUI(appointment,context) ;
        appointment.setStatus(new FiniteValue(FVConstants.APPT_STATUS.SCHEDULED));
        //appointment.setVisitCompletion(appointment.getApptDate());
       // appointmentValidator.validateForCreate(appointment,context,this);

        List <RadsError> errors =  appointmentValidator.validateForCreate(appointment,context,this);
        errors.addAll(appointmentValidator.scheduleValidation(appointment,context));

        if(Utils.isNullList(errors)) {
            create(appointment, context);
            result.setResult(TransactionResult.Result.SUCCESS);
        }else {
            result.setResult(TransactionResult.Result.FAILURE);
            result.setErrors(errors);
        }

        return result;
    }

    public PageResult closeAppointment(Appointment appointment, ProductContext context)
    {
        Appointment app = (Appointment)getById(appointment.getId()) ;
        PageResult result = new PageResult() ;
        app.setManagerRemarks(appointment.getManagerRemarks());
        if(FVConstants.APPT_STATUS.CANCELLED.equalsIgnoreCase(app.getStatus().getCode()) ) {
            app.setStatus(new FiniteValue(FVConstants.APPT_STATUS.CLOSEDCANCELED));
            app.setCancelReasonManager(appointment.getCancelReasonManager()) ;
        } else if(FVConstants.APPT_STATUS.COMPLETED.equalsIgnoreCase(app.getStatus().getCode()) ){
            app.setStatus(new FiniteValue(FVConstants.APPT_STATUS.CLOSED));
        }
        update(app,context) ;
        result.setResult(TransactionResult.Result.SUCCESS);
        result.setNextPageKey("mgrcmpappointments");
        return  result;

    }

    public void createFollowupAppointment(Appointment currentAppointment, ProductContext context)
    {
        Appointment appointment = new Appointment();
        appointment.setLocation(currentAppointment.getLocation());
        appointment.setDoctor(currentAppointment.getDoctor());
        appointment.setDuration(currentAppointment.getDuration());
        appointment.setStockist(currentAppointment.getStockist());
        appointment.setStore(currentAppointment.getStore());
        appointment.setPartyType(currentAppointment.getPartyType());
        appointment.setApptDate(currentAppointment.getNextAppointmentDate());
        appointment.setAgent(currentAppointment.getAgent());
        appointment.setManager(currentAppointment.getManager());

        try {
            String selectedtime = String.valueOf(currentAppointment.getNextAppointmentHH() + ":" + String.valueOf(currentAppointment.getNextAppointmentMM()));
            appointment.setApptTime(new SimpleDateFormat("HH:mm").parse(selectedtime));
        }catch (ParseException ex) {
            Logger.logException(  "Error in parsing",this.getClass(),ex);
        }

        appointment.setCompany(currentAppointment.getCompany());
        appointment.setStatus(new FiniteValue(FVConstants.APPT_STATUS.PLANNED));
        appointmentValidator.setBusinessKey(appointment,context);
        create(appointment,context) ;

    }

    public PageResult completeAppointment(Appointment appointment, ProductContext context)
    {
        Appointment app = (Appointment)getById(appointment.getId()) ;
        PageResult result = new PageResult() ;
        if(FVConstants.APPT_STATUS.PENDING.equalsIgnoreCase(app.getStatus().getCode()) ||
                FVConstants.APPT_STATUS.SCHEDULED.equalsIgnoreCase(app.getStatus().getCode()) ) {
            app.setStatus(new FiniteValue(FVConstants.APPT_STATUS.COMPLETED));
            app.setPromotedItems(appointment.getPromotedItems());
            app.setFeedBack(appointment.getFeedBack());
            app.setVisitCompletion(appointment.getApptDate());
            app.setDescription(appointment.getDescription());
            List<RadsError> errors = appointmentValidator.adaptFromUI(appointment,context);

            /*if(!Utils.isNullCollection(appointment.getPromotedItems())) {
                appointment.getPromotedItems().forEach( promotedItem ->  {
                    ItemService itemService = ServiceFactory.getItemService() ;
                    Item item = (Item)itemService.fetchOneActive(" where name ='" + promotedItem.getItem().getName() + "'", "" , context);
                    promotedItem.setItem(item);
                    promotedItem.setCompany(app.getCompany());
                    promotedItem.setAppointment(app);
                });

            }

            if(!Utils.isNullCollection(appointment.getPrescriptionSurveys())) {
                appointment.getPrescriptionSurveys().forEach( promotedItem ->  {
                    ItemService itemService = ServiceFactory.getItemService() ;
                    Item item = (Item)itemService.fetchOneActive(" where name ='" + promotedItem.getItem().getName() + "'", "" , context);
                    promotedItem.setItem(item);
                    promotedItem.setCompany(app.getCompany());
                    promotedItem.setAppointment(app);
                });

            }
*/
            if(Utils.isNullList(errors)) {
                collateBeforUpdate(appointment, app);
                app.setPromotedItems(appointment.getPromotedItems());
                app.setPrescriptionSurveys(appointment.getPrescriptionSurveys());
                app.setOrderLines(appointment.getOrderLines());
                app.setStockistVisitOrderLines(appointment.getStockistVisitOrderLines());
                app.setCompetitorSalesLines(appointment.getCompetitorSalesLines());
                app.setApptTime(app.getApptTime());
                update(app, context);

                if(appointment.getScheduleNextAppointment().booleanValue() == true )  {
                    createFollowupAppointment(appointment,context);
                }
            } else {
                result.setErrors(errors);
                result.setResult(TransactionResult.Result.FAILURE);
            }
        }else {
            result.addError(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.APPOINTMENT_NOTINCOMPLETESTATUS));
            result.setObject(app);
            result.setResult(TransactionResult.Result.FAILURE);
        }
        return result;
    }

    public PageResult cancelAppointment(Appointment appointment, ProductContext context)
    {
        Appointment app = (Appointment)getById(appointment.getId()) ;
        PageResult result = new PageResult() ;
        if(FVConstants.APPT_STATUS.PENDING.equalsIgnoreCase(app.getStatus().getCode()) ||
        FVConstants.APPT_STATUS.SCHEDULED.equalsIgnoreCase(app.getStatus().getCode()) ) {
                app.setStatus(new FiniteValue(FVConstants.APPT_STATUS.CANCELLED));
                if (appointment.getCancelReasonAgent() == null   || appointment.getCancelReasonAgent().getId() < 0 ) {
                    result.addError(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.REASON_CODE_MANDATORYFORCANCEL));
                    result.setResult(TransactionResult.Result.FAILURE);
                    result.setObject(appointment);
                }

                app.setCancelReasonAgent(appointment.getCancelReasonAgent());
                update(app,context) ;
                result.setResult(TransactionResult.Result.SUCCESS);
        }else {
            result.addError(AppointmentTemplateValidator.getErrorforCode(context, AppointmentTemplateErrorCodes.APPOINTMENT_NOTINCANCELATONSTATUS));
            result.setObject(app);
            result.setResult(TransactionResult.Result.FAILURE);

        }
        return result;

    }

    public List<Appointment> getStockistAppointments(Stockist stockist, Date fromDate, ProductContext context)
    {
        return appointmentDAO.getAllStockistsAppointments(stockist.getId(),context.getLoggedinCompany(),fromDate);
    }


    public List<Appointment> getStoreAppointments(Store store, Date fromDate, ProductContext context)
    {
        return appointmentDAO.getAllStoreAppointments(store.getId(),context.getLoggedinCompany(),fromDate);
    }


    public List<Appointment> getDoctorAppointments(Doctor doctor, Date fromDate, ProductContext context)
    {
        return appointmentDAO.getAllDoctorAppointments(doctor.getId(),context.getLoggedinCompany(),fromDate);
    }

    public List<PrescriptionSurvey> getDoctorSurveys(Doctor doctor, Date fromDate, ProductContext context)
    {
        return appointmentDAO.getAllDoctorSurveys(doctor.getId(),context.getLoggedinCompany(),fromDate);
    }
}