package com.primus.crm.appointment.validator;

import com.primus.abstracts.*;
import com.primus.common.FVConstants;
import com.primus.common.Logger;
import com.primus.common.ProductContext;
import com.primus.common.ServiceFactory;
import com.primus.externals.doctor.model.Doctor;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.primus.externals.stockist.model.Stockist;
import com.primus.externals.stockist.model.StockistAssociation;
import com.primus.externals.stockist.service.StockistService;
import com.primus.externals.store.model.Store;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.externals.store.service.StoreService;
import com.primus.framework.nextup.NextUpGenerator;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;

import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import com.primus.crm.appointment.model.AppointmentTemplate;


/**
 * * Class Generated by Primus Auto code generator
 **/
@Component
public class AppointmentTemplateValidator extends AbstractValidator {

    @Override
    public String getBusinessKeyField() {
        return "Template_No";
    }

    private StockistAssociation getStockistAssociation (Collection<StockistAssociation> assocationList , int company)
    {
        if (Utils.isNullCollection(assocationList)) return null;
        return  assocationList.stream().filter( association -> association.getCompany().getId() == company ).findFirst().orElse(null);

    }

    private StoreAssociation getStoreAssociation (Collection<StoreAssociation> assocationList , int company)
    {
        if (Utils.isNullCollection(assocationList)) return null;
        return  assocationList.stream().filter( association -> association.getCompany().getId() == company ).findFirst().orElse(null);

    }

    private DoctorAssociation getDoctorAssociation (Collection<DoctorAssociation> assocationList , int company)
    {
        if (Utils.isNullCollection(assocationList)) return null;
        return  assocationList.stream().filter( association -> association.getCompany().getId() == company ).findFirst().orElse(null);

    }

    @Override
    public List<RadsError> businessValidations(PrimusModel model, ProductContext context, AbstractService service) {
        List<RadsError> ans = new ArrayList<>();
        AppointmentTemplate appointmentTemplate = (AppointmentTemplate) model;
        List<RadsError> results = new ArrayList<RadsError>();
        if ("PTSTCK".equalsIgnoreCase(appointmentTemplate.getPartyType().getCode())) {
            if (appointmentTemplate.getStockist() == null)
                results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_WRONGWITH_TYPE, "Stockist"));
            else {
                StockistAssociation association = getStockistAssociation(appointmentTemplate.getStockist().getStockistAssociations(), context.getLoggedinCompany());
                if (association == null) {
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_FOR_BUSINESS, "Stockist", appointmentTemplate.getStockist().getName()));

                } else  if (association.getLocation().getId() != appointmentTemplate.getLocation().getId())
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Stockist", appointmentTemplate.getStockist().getName(),
                            association.getLocation().getName()));

            }

        }
        if ("PTSTRE".equalsIgnoreCase(appointmentTemplate.getPartyType().getCode())) {
            if (appointmentTemplate.getStore() == null)
                results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_WRONGWITH_TYPE, "Store"));
            else {
                StoreAssociation association = getStoreAssociation(appointmentTemplate.getStore().getStoreAssociations(), context.getLoggedinCompany());
                if (association == null) {
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_FOR_BUSINESS, "Store", appointmentTemplate.getStore().getName()));

                }else  if (association.getLocation().getId() != appointmentTemplate.getLocation().getId())
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Store",
                            appointmentTemplate.getStore().getName(), association.getLocation().getName()));

            }

        }
        if ("PTDCT".equalsIgnoreCase(appointmentTemplate.getPartyType().getCode())) {
            if (appointmentTemplate.getDoctor() == null)
                results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.PARTY_WRONGWITH_TYPE, "Doctor"));
            else {
                DoctorAssociation association = getDoctorAssociation(appointmentTemplate.getDoctor().getDoctorAssociations(), context.getLoggedinCompany());
                if (association == null) {
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_FOR_BUSINESS, "Doctor", appointmentTemplate.getDoctor().getName()));
                } else    if (association.getLocation().getId() != appointmentTemplate.getLocation().getId())
                    results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.NOT_LINKED_WITH_LOCATION, "Doctor",
                            appointmentTemplate.getDoctor().getName(), association.getLocation().getName()));

            }
        }

        if (appointmentTemplate.getStartFrom().after(appointmentTemplate.getEndAt())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.END_BEFORE_START));
        }

        return results;
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        AppointmentTemplate appointmentTemplate = (AppointmentTemplate) model;
        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(appointmentTemplate.getTemplateNo())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Template_No"));
        }

        if (Utils.isNull(appointmentTemplate.getManager())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Manager"));
        }

        if (Utils.isNull(appointmentTemplate.getAgent())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Agent"));
        }

        if (Utils.isNull(appointmentTemplate.getPartyType())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Party"));
        }

        if (Utils.isNull(appointmentTemplate.getLocation())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Location"));
        }

        if (Utils.isNull(appointmentTemplate.getStartFrom())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Start_From"));
        }

        if (Utils.isNull(appointmentTemplate.getEndAt())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "End_At"));
        }

        if (Utils.isNull(appointmentTemplate.getAppointmentTime())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appointment_Time"));
        }

        if (Utils.isNull(appointmentTemplate.getPattern())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Pattern"));
        }

        if (Utils.isNull(appointmentTemplate.getDuration())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Duration"));
        }


        return results;

    }

    @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {
        return null;
    }

    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
        super.adaptFromUI(model, context);
        List<RadsError> results = new ArrayList<RadsError>();
        AppointmentTemplate template = (AppointmentTemplate) model;
        if(Utils.isNull(template.getTemplateNo() )){
            String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPTTEMPLATE,context,null,null,template.getStartFrom());
            template.setTemplateNo(no);
        }

        if (template.getStockist() != null) {
            StockistService service = ServiceFactory.getStockistService();
            List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + template.getStockist().getName() + "'", null, context);
            if (!Utils.isNullList(stockists))
                template.setStockist(stockists.get(0).getStockist());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));

        }
        if (template.getStore() != null) {
            StoreService service = ServiceFactory.getStoreService();
            List<StoreAssociation> datas = ( List<StoreAssociation> ) service.fetchAllLinked(" where store.name ='" + template.getStore().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas))
                template.setStore(datas.get(0).getStore());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
        }
        if (template.getDoctor()!= null) {
            DoctorService service = ServiceFactory.getDoctorService();
            List<DoctorAssociation> datas = ( List<DoctorAssociation> ) service.fetchAllLinked(" where doctor.name ='" + template.getDoctor().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas))
                template.setDoctor(datas.get(0).getDoctor());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));
        }

        int weekDays = 1 ;

        if (template.isSundayFlag()) weekDays *= 2;
        if(template.isMondayFlag()) weekDays *= 3 ;
        if (template.isTuesdayFlag()) weekDays *= 5;
        if(template.isWednesdayFlag()) weekDays *= 7;
        if (template.isThursFlag()) weekDays *= 11;
        if(template.isFriFlag()) weekDays *= 13;
        if(template.isSaturdayFlag()) weekDays *= 17;

          template.setWeekDays(weekDays);
          try {
              String selectedtime = String.valueOf(template.getHh()) + ":" + String.valueOf(template.getMm());
              template.setAppointmentTime(new SimpleDateFormat("HH:mm").parse(selectedtime));
          }catch (ParseException ex) {
              Logger.logException(  "Error in parsing",this.getClass(),ex);
          }

        return results;
    }

    @Override
    public List<RadsError> adaptToUI(PrimusModel model, ProductContext context) {
        AppointmentTemplate template = (AppointmentTemplate) model;
        int weekProduct = (template.getWeekDays() !=null)?template.getWeekDays():1 ;
        if(weekProduct % 2 == 0) template.setSundayFlag(true);
        if(weekProduct % 3 == 0) template.setMondayFlag(true);
        if(weekProduct % 5 == 0) template.setTuesdayFlag(true);
        if(weekProduct % 7 == 0) template.setWednesdayFlag(true);
        if(weekProduct % 11 == 0) template.setThursFlag(true);
        if(weekProduct % 13 == 0) template.setFriFlag(true);
        if(weekProduct % 17 == 0) template.setSaturdayFlag(true);

        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String timeString = sdf.format(template.getAppointmentTime()) ;
        String hhPart = timeString.substring(0,2);
        String mmPart = timeString.substring(3,5);
        template.setHh(Integer.parseInt(hhPart));
        template.setMm(Integer.parseInt(mmPart));

        return super.adaptToUI(model, context);

    }
}