package com.primus.crm.appointment.validator;

import com.primus.abstracts.AbstractValidator;
import com.primus.abstracts.CommonErrorCodes;
import com.primus.abstracts.PrimusBusinessModel;
import com.primus.abstracts.PrimusModel;
import com.primus.admin.region.model.Location;
import com.primus.common.FVConstants;
import com.primus.common.Logger;
import com.primus.common.ProductContext;
import com.primus.common.ServiceFactory;
import com.primus.common.user.model.User;
import com.primus.crm.appointment.model.*;
import com.primus.externals.competitor.model.Competitor;
import com.primus.externals.competitor.service.CompetitorService;
import com.primus.externals.doctor.model.Doctor;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.primus.externals.stockist.model.StockistAssociation;
import com.primus.externals.stockist.service.StockistService;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.externals.store.service.StoreService;
import com.primus.framework.nextup.NextUpGenerator;
import com.primus.merchandise.category.model.Category;
import com.primus.merchandise.category.service.CategoryService;
import com.primus.merchandise.item.model.Item;
import com.primus.merchandise.item.model.Sku;
import com.primus.merchandise.item.service.ItemService;
import com.primus.merchandise.item.service.SkuService;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;


/**
 * * Class Generated by Primus Auto code generator
 **/
@Component
public class AppointmentValidator extends AbstractValidator {

    @Override
    public String getBusinessKeyField() {
        return "Doc_No";
    }



    public List<RadsError> completionValidation(Appointment appointment, ProductContext context) {

        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(appointment.getFeedBack())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.FEEDBACK_REQD_FORCOMPLETION));
        }
        return results;
    }

    public List<RadsError> scheduleValidation(Appointment appointment, ProductContext context) {

        List<RadsError> results = new ArrayList<RadsError>();
       /* if (Utils.isNull(appointment.getAgent()) || Utils.isNull(appointment.getAgent().getUserId()) ) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.CANNOT_BE_EMPTY, "Agent"));
        }*/
        if (!Utils.isNull(appointment.getFeedBack())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.FEEDBACK_ONLY_FORCOMPLETION));
        }
        if (!Utils.isNullCollection(appointment.getOrderLines())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.ORDERLINES_ONLY_FORCOMPLETION));
        }
        if (!Utils.isNullCollection(appointment.getCompetitorSalesLines())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.COMPSALES_ONLY_FORCOMPLETION));
        }
        if (!Utils.isNullCollection(appointment.getStockistVisitOrderLines())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.STOCKISTORDERS_ONLY_FORCOMPLETION));
        }
        return results;
    }

    public List<RadsError> stockistSpecificValidations(PrimusModel model, ProductContext context) {
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model;
        if (appointment.getStockistVisitOrderLines() == null || appointment.getStockistVisitOrderLines().size() == 0) return results ;
        if(appointment.getStockistVisitOrderLines().size() == 1 && appointment.getStockistVisitOrderLines().stream().findFirst().orElse(null).isEmpty())
        {
            appointment.setStockistVisitOrderLines(null);
        }else {
            appointment.getStockistVisitOrderLines().forEach( line ->  {
                if(line.isEmpty()) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Order_Line")) ;
                }
            });
        }
        return results;
    }

    public List<RadsError> doctorSpecificValidations(PrimusModel model, ProductContext context) {
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model ;
        if (appointment.getPromotedItems() == null || appointment.getPromotedItems().size() == 0) return results ;
        if( appointment.getPromotedItems().size() == 1 && appointment.getPromotedItems().stream().findFirst().orElse(null).isEmpty())
        {
            appointment.setPromotedItems(null);
        }else {
            appointment.getPromotedItems().forEach( promotedItem ->  {
                if(promotedItem.isEmpty()) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Promoted_Item")) ;
                }
            });
        }

        return results ;
    }

    public List<RadsError> storeSpecificValidations(PrimusModel model, ProductContext context) {
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model ;
        if (appointment.getPrescriptionSurveys() != null && appointment.getPrescriptionSurveys().size() > 0  ) {
            if (appointment.getPrescriptionSurveys().size() == 1 && appointment.getPrescriptionSurveys().stream().findFirst().orElse(null).isEmpty()) {
                appointment.setPrescriptionSurveys(null);
            } else {
                appointment.getPrescriptionSurveys().forEach(promotedItem -> {
                    if (promotedItem.isEmpty()) {
                        results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Prescription_Survey"));
                    }
                });
            }
        }

        if (appointment.getOrderLines() != null && appointment.getOrderLines().size() > 0  ) {
            if (appointment.getOrderLines().size() == 1 && appointment.getOrderLines().stream().findFirst().orElse(null).isEmpty()) {
                appointment.setOrderLines(null);
            } else {
                appointment.getOrderLines().forEach(line -> {
                    if (line.isEmpty()) {
                        results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Order_Line"));
                    }
                });
            }

        }

        if (appointment.getCompetitorSalesLines() != null && appointment.getCompetitorSalesLines().size() > 0  ) {
            if (appointment.getCompetitorSalesLines().size() == 1 && appointment.getCompetitorSalesLines().stream().findFirst().orElse(null).isEmpty()) {
                appointment.setCompetitorSalesLines(null);
            } else {
                appointment.getCompetitorSalesLines().forEach(line -> {
                    if (line.isEmpty()) {
                        results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Competitor_Line"));
                    }
                });
            }
        }


        return results ;
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        Appointment appointment = (Appointment) model;
        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(appointment.getDocNo())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Doc_No"));
        }


        if (Utils.isNull(appointment.getPartyType())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Party_Type"));
        } else  {
            if(appointment.getPartyType().getCode().equalsIgnoreCase(FVConstants.EXTERNAL_PARTY.DOCTOR)) {
                results.addAll(doctorSpecificValidations(model,context));
            }
            if(appointment.getPartyType().getCode().equalsIgnoreCase(FVConstants.EXTERNAL_PARTY.STORE)) {
                results.addAll(storeSpecificValidations(model,context));
            }
            if(appointment.getPartyType().getCode().equalsIgnoreCase(FVConstants.EXTERNAL_PARTY.STOCKIST)) {
                results.addAll(stockistSpecificValidations(model,context));
            }


        }

        if (Utils.isNull(appointment.getLocation())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Location"));
        }

        if (Utils.isNull(appointment.getApptDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Date"));
        }


        if (Utils.isNull(appointment.getAgent())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Agent"));
        }

        /*if (Utils.isNull(appointment.getApptDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Date"));
        }*/

        if (Utils.isNull(appointment.getApptTime())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Time"));
        }

        if (Utils.isNull(appointment.getStatus())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Status"));
        }


        return results;

    }

    @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {
        return null;
    }

    @Override
    public List<RadsError> adaptToUI(PrimusModel model, ProductContext context) {
        Appointment appointment = (Appointment) model;
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String timeString = sdf.format(appointment.getApptTime()) ;
        String hhPart = timeString.substring(0,2);
        String mmPart = timeString.substring(3,5);
        appointment.setHh(Integer.parseInt(hhPart));
        appointment.setMm(Integer.parseInt(mmPart));

        return super.adaptToUI(model, context);
    }

    public void  setBusinessKey(Appointment appointment,ProductContext context)
    {
        if (Utils.isNullString(appointment.getDocNo())) {
            Location location = ServiceFactory.getLocation(appointment.getLocation(), context);
            if (location != null && location.getId() > 0 ) {
                appointment.setLocation(location);
                if (Utils.isNull(appointment.getDocNo()) && location.getRegion() != null && appointment.getApptDate() != null) {
                    String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, location.getRegion(), appointment.getApptDate());
                    appointment.setDocNo(no);
                }
            }
        }
    }

    private void nullifyChildifRequired(Appointment appointment, ProductContext context) {
        if(appointment.getPromotedItems() != null && appointment.getPromotedItems().size() == 1   ) {
            PromotedItem childLine=  appointment.getPromotedItems().stream().findFirst().orElse(null);
            if(childLine == null || childLine.isEmpty() )  {
                appointment.setPromotedItems(null);
            }
        }

        if(appointment.getStockistVisitOrderLines() != null && appointment.getStockistVisitOrderLines().size() == 1   ) {
            StockistVisitOrderLine childLine=  appointment.getStockistVisitOrderLines().stream().findFirst().orElse(null);
            if(childLine == null || childLine.isEmpty() )  {
                appointment.setStockistVisitOrderLines(null);
            }
        }

        if(appointment.getOrderLines() != null && appointment.getOrderLines().size() == 1   ) {
            StoreVisitOrderLine childLine=  appointment.getOrderLines().stream().findFirst().orElse(null);
            if(childLine == null || childLine.isEmpty() )  {
                appointment.setOrderLines(null);
            }
        }

        if(appointment.getCompetitorSalesLines() != null && appointment.getCompetitorSalesLines().size() == 1   ) {
            CompetitorSalesLine childLine=  appointment.getCompetitorSalesLines().stream().findFirst().orElse(null);
            if(childLine == null || childLine.isEmpty() )  {
                appointment.setCompetitorSalesLines(null);
            }
        }

        if(appointment.getPrescriptionSurveys() != null && appointment.getPrescriptionSurveys().size() == 1   ) {
            PrescriptionSurvey childLine=  appointment.getPrescriptionSurveys().stream().findFirst().orElse(null);
            if(childLine == null || childLine.isEmpty() )  {
                appointment.setPrescriptionSurveys(null);
            }
        }

    }
    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
        super.adaptFromUI(model, context);
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model;

        if(appointment.getAgent() == null && context.getPageAccessCode().contains("AGENT") ) {
            User agent = new User();
            agent.setUserId(context.getUser());
            appointment.setAgent(agent);
        }

        if(appointment.getManager() == null &&  context.getPageAccessCode().contains("MGR")) {
            User manager = new User();
            manager.setUserId(context.getUser());
            appointment.setManager(manager);
        }

        if (appointment.getStockist() != null && appointment.getStockist().getId() <=0  ) {
            StockistService service = ServiceFactory.getStockistService();
            List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + appointment.getStockist().getName() + "'", null, context);
            if (!Utils.isNullList(stockists)) {
                appointment.setStockist(stockists.get(0).getStockist());
                appointment.setLocation(stockists.get(0).getLocation());
            } else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));

        }
        if (appointment.getStore() != null && appointment.getStore().getId() <=0  ) {
            StoreService service = ServiceFactory.getStoreService();
            List<StoreAssociation> datas = ( List<StoreAssociation> ) service.fetchAllLinked(" where store.name ='" + appointment.getStore().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas)) {
                appointment.setStore(datas.get(0).getStore());
                appointment.setLocation(datas.get(0).getLocation());
            }else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
        }
        if (appointment.getDoctor()!= null && appointment.getDoctor().getId() <=0  ) {
            DoctorService service = ServiceFactory.getDoctorService();
            List<DoctorAssociation> datas = ( List<DoctorAssociation> ) service.fetchAllLinked(" where doctor.name ='" + appointment.getDoctor().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas)) {
                appointment.setDoctor(datas.get(0).getDoctor());
                appointment.setLocation(datas.get(0).getLocation());
            }else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));
        }
        setBusinessKey(appointment,context);
        try {
            String selectedtime = String.valueOf(appointment.getHh()) + ":" + String.valueOf(appointment.getMm());
            appointment.setApptTime(new SimpleDateFormat("HH:mm").parse(selectedtime));
        }catch (ParseException ex) {
            Logger.logException(  "Error in parsing",this.getClass(),ex);
        }
        nullifyChildifRequired(appointment,context);
        if(!Utils.isNullCollection(appointment.getPromotedItems())) {
            appointment.getPromotedItems().forEach( promotedItem ->  {
                if (!promotedItem.isEmpty()) {
                    ItemService itemService = ServiceFactory.getItemService();
                    Item item = (Item) itemService.fetchOneActive(" where name ='" + promotedItem.getItem().getName() + "'", "", context);
                    if (item == null) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND_WITHVALUE, "Item", promotedItem.getItem().getName()));
                    }
                    promotedItem.setItem(item);
                    promotedItem.setCompany(appointment.getCompany());
                    promotedItem.setAppointment(appointment);
                }
            });

        }

        if(!Utils.isNullCollection(appointment.getPrescriptionSurveys())) {
            appointment.getPrescriptionSurveys().forEach( survey ->  {
                if(!survey.isEmpty()) {
                    SkuService skuService = ServiceFactory.getSKUService();
                    Sku sku = (Sku) skuService.fetchOneActive(" where name ='" + survey.getSku().getName() + "'", "", context);
                    if (sku == null) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND_WITHVALUE, "Sku", survey.getSku().getName()));
                    }
                    survey.setSku(sku);
                    survey.setCompany(appointment.getCompany());
                    survey.setAppointment(appointment);

                    DoctorService doctorService = ServiceFactory.getDoctorService();
                    Doctor doctor = (Doctor) doctorService.fetchOneActive(" where name ='" + survey.getDoctor().getName() + "'", "", context);
                    if (doctor == null) {
                        survey.setDoctorName(survey.getDoctor().getName());
                    }
                    survey.setDoctor(doctor);
                }
            });

        }

        if(!Utils.isNullCollection(appointment.getOrderLines())) {
            appointment.getOrderLines().forEach( line ->  {
                if(!line.isEmpty()) {
                    SkuService skuService = ServiceFactory.getSKUService();
                    Sku sku = (Sku) skuService.fetchOneActive(" where name ='" + line.getSku().getName() + "'", "", context);
                    if (sku == null) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND_WITHVALUE, "Sku", line.getSku().getName()));
                    }
                    line.setSku(sku);
                    line.setUom(sku.getUom());
                    line.setCompany(appointment.getCompany());
                    line.setAppointment(appointment);
                }
            });
        }

        if(!Utils.isNullCollection(appointment.getStockistVisitOrderLines())) {
            appointment.getStockistVisitOrderLines().forEach( line ->  {
                if(!line.isEmpty()) {
                    SkuService skuService = ServiceFactory.getSKUService();
                    Sku sku = (Sku) skuService.fetchOneActive(" where name ='" + line.getSku().getName() + "'", "", context);
                    if (sku == null) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND_WITHVALUE, "Sku", line.getSku().getName()));
                    }
                    line.setSku(sku);
                    line.setUom(sku.getUom());
                    line.setCompany(appointment.getCompany());
                    line.setAppointment(appointment);
                }
            });
        }

        if(!Utils.isNullCollection(appointment.getCompetitorSalesLines())) {
            appointment.getCompetitorSalesLines().forEach(line -> {
                if (!line.isEmpty()) {
                    CompetitorService service = ServiceFactory.getCompetitorService();
                    Competitor competitor = (Competitor) service.fetchOneActive(" where name ='" + line.getCompetitor().getName() + "'", "", context);
                    if (competitor == null) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND_WITHVALUE, "Competitor", line.getCompetitor().getName()));
                    }
                    if(line.getCategory() != null && line.getCategory().getId() <= 0  && !Utils.isNullString(line.getCategory().getName()) ) {
                        CategoryService categoryService = ServiceFactory.getCategoryService() ;
                        Category category = (Category)categoryService.fetchOneActive( " where name ='" + line.getCategory().getName() + "'", "", context);
                        line.setCategory(category);
                    }
                    if(line.getCategory() == null || line.getCategory().getId() <= 0 ) {
                        results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Category"));
                    }



                    line.setCompetitor(competitor);
                    line.setCompany(appointment.getCompany());
                    line.setAppointment(appointment);
                }
            });
        }




        return null;
    }


}