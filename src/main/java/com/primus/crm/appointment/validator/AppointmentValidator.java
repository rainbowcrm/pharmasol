package com.primus.crm.appointment.validator;

import com.primus.abstracts.AbstractValidator;
import com.primus.abstracts.CommonErrorCodes;
import com.primus.abstracts.PrimusBusinessModel;
import com.primus.abstracts.PrimusModel;
import com.primus.admin.region.model.Location;
import com.primus.common.FVConstants;
import com.primus.common.Logger;
import com.primus.common.ProductContext;
import com.primus.common.ServiceFactory;
import com.primus.common.user.model.User;
import com.primus.crm.appointment.model.AppointmentTemplate;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.primus.externals.stockist.model.StockistAssociation;
import com.primus.externals.stockist.service.StockistService;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.externals.store.service.StoreService;
import com.primus.framework.nextup.NextUpGenerator;
import com.primus.merchandise.item.model.Item;
import com.primus.merchandise.item.service.ItemService;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import com.primus.crm.appointment.model.Appointment;


/**
 * * Class Generated by Primus Auto code generator
 **/
@Component
public class AppointmentValidator extends AbstractValidator {

    @Override
    public String getBusinessKeyField() {
        return "Doc_No";
    }



    public List<RadsError> completionValidation(Appointment appointment, ProductContext context) {

        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(appointment.getFeedBack())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.FEEDBACK_REQD_FORCOMPLETION));
        }
        return results;
    }

    public List<RadsError> scheduleValidation(Appointment appointment, ProductContext context) {

        List<RadsError> results = new ArrayList<RadsError>();
       /* if (Utils.isNull(appointment.getAgent()) || Utils.isNull(appointment.getAgent().getUserId()) ) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.CANNOT_BE_EMPTY, "Agent"));
        }*/
        if (!Utils.isNull(appointment.getFeedBack())) {
            results.add(getErrorforCode(context, AppointmentTemplateErrorCodes.FEEDBACK_ONLY_FORCOMPLETION));
        }
        return results;
    }

    public List<RadsError> doctorSpecificValidations(PrimusModel model, ProductContext context) {
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model ;
        if(appointment.getPromotedItems().size() == 1 && appointment.getPromotedItems().stream().findFirst().orElse(null).isEmpty())
        {
            appointment.setPromotedItems(null);
        }else {
            appointment.getPromotedItems().forEach( promotedItem ->  {
                if(promotedItem.isEmpty()) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Promoted_Item")) ;
                }
            });
        }

        return results ;
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        Appointment appointment = (Appointment) model;
        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(appointment.getDocNo())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Doc_No"));
        }


        if (Utils.isNull(appointment.getPartyType())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Party_Type"));
        } else  {
            if(appointment.getPartyType().getCode().equalsIgnoreCase(FVConstants.EXTERNAL_PARTY.DOCTOR)) {
                results.addAll(doctorSpecificValidations(model,context));

            }

        }

        if (Utils.isNull(appointment.getLocation())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Location"));
        }

        if (Utils.isNull(appointment.getApptDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Date"));
        }


        if (Utils.isNull(appointment.getAgent())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Agent"));
        }

        /*if (Utils.isNull(appointment.getApptDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Date"));
        }*/

        if (Utils.isNull(appointment.getApptTime())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Appt_Time"));
        }

        if (Utils.isNull(appointment.getStatus())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Status"));
        }


        return results;

    }

    @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {
        return null;
    }

    @Override
    public List<RadsError> adaptToUI(PrimusModel model, ProductContext context) {
        Appointment appointment = (Appointment) model;
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String timeString = sdf.format(appointment.getApptTime()) ;
        String hhPart = timeString.substring(0,2);
        String mmPart = timeString.substring(3,5);
        appointment.setHh(Integer.parseInt(hhPart));
        appointment.setMm(Integer.parseInt(mmPart));

        return super.adaptToUI(model, context);
    }

    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
        super.adaptFromUI(model, context);
        List<RadsError> results = new ArrayList<RadsError>();
        Appointment appointment = (Appointment) model;

        if(appointment.getAgent() == null && context.getPageAccessCode().contains("AGENT") ) {
            User agent = new User();
            agent.setUserId(context.getUser());
            appointment.setAgent(agent);
        }

        if(appointment.getManager() == null &&  context.getPageAccessCode().contains("MGR")) {
            User manager = new User();
            manager.setUserId(context.getUser());
            appointment.setManager(manager);
        }

        if(appointment.getLocation().getId() >0 ) {
            Location location  = ServiceFactory.getLocation(appointment.getLocation(),context);
            if (Utils.isNull(appointment.getDocNo()) && location.getRegion() != null && appointment.getApptDate() != null) {
                String no = NextUpGenerator.getNextNumber(FVConstants.PGM_APPT, context, null, location.getRegion(), appointment.getApptDate());
                appointment.setDocNo(no);
            }
        }

        if (appointment.getStockist() != null) {
            StockistService service = ServiceFactory.getStockistService();
            List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + appointment.getStockist().getName() + "'", null, context);
            if (!Utils.isNullList(stockists))
                appointment.setStockist(stockists.get(0).getStockist());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));

        }
        if (appointment.getStore() != null) {
            StoreService service = ServiceFactory.getStoreService();
            List<StoreAssociation> datas = ( List<StoreAssociation> ) service.fetchAllLinked(" where store.name ='" + appointment.getStore().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas))
                appointment.setStore(datas.get(0).getStore());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
        }
        if (appointment.getDoctor()!= null) {
            DoctorService service = ServiceFactory.getDoctorService();
            List<DoctorAssociation> datas = ( List<DoctorAssociation> ) service.fetchAllLinked(" where doctor.name ='" + appointment.getDoctor().getName() +"'",null, context) ;
            if(!Utils.isNullList(datas))
                appointment.setDoctor(datas.get(0).getDoctor());
            else
                results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));
        }
        try {
            String selectedtime = String.valueOf(appointment.getHh()) + ":" + String.valueOf(appointment.getMm());
            appointment.setApptTime(new SimpleDateFormat("HH:mm").parse(selectedtime));
        }catch (ParseException ex) {
            Logger.logException(  "Error in parsing",this.getClass(),ex);
        }

        if(!Utils.isNullCollection(appointment.getPromotedItems())) {
            appointment.getPromotedItems().forEach( promotedItem ->  {
                ItemService itemService = ServiceFactory.getItemService() ;
                Item item = (Item)itemService.fetchOneActive(" where name ='" + promotedItem.getItem().getName() + "'", "" , context);
                promotedItem.setItem(item);
                promotedItem.setCompany(appointment.getCompany());
                promotedItem.setAppointment(appointment);
            });

        }

        

        return null;
    }


}