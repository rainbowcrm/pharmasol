package com.primus.crm.target.validator;

import com.primus.abstracts.AbstractValidator;
import com.primus.abstracts.CommonErrorCodes;
import com.primus.abstracts.PrimusBusinessModel;
import com.primus.abstracts.PrimusModel;
import com.primus.common.FVConstants;
import com.primus.common.ProductContext;
import com.primus.common.ServiceFactory;
import com.primus.crm.target.model.AgentSaleTarget;
import com.primus.crm.target.model.AgentVisitTarget;
import com.primus.crm.target.model.ItemSaleTarget;
import com.primus.crm.target.service.TargetService;
import com.primus.externals.doctor.model.DoctorAssociation;
import com.primus.externals.doctor.service.DoctorService;
import com.primus.externals.stockist.model.StockistAssociation;
import com.primus.externals.stockist.service.StockistService;
import com.primus.externals.store.model.StoreAssociation;
import com.primus.externals.store.service.StoreService;
import com.primus.merchandise.item.model.Item;
import com.primus.merchandise.item.service.ItemService;
import com.techtrade.rads.framework.model.abstracts.RadsError;
import com.techtrade.rads.framework.utils.Utils;
import org.springframework.stereotype.Component;
import java.util.ArrayList;
import java.util.List;
import com.primus.crm.target.model.Target;


/**
** Class Generated by Primus Auto code generator
**/
@Component
public class TargetValidator extends AbstractValidator {

@Override
    public String getBusinessKeyField() {
        return "Period";
    }

    @Override
    public List<RadsError> checkforMandatoryFields(PrimusModel model, ProductContext context) {
        Target target = (Target) model;
        List<RadsError> results = new ArrayList<RadsError>();
        if (Utils.isNull(target.getPeriod())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Period"));
        }

        if (Utils.isNull(target.getLocation())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Location"));
        }

        if (Utils.isNull(target.getFromDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "From"));
        }

        if (Utils.isNull(target.getToDate())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "To"));
        }

        if (Utils.isNull(target.getManager())) {
            results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Manager"));
        }
        TargetService service =  ServiceFactory.getTargetService() ;
        Target existingTarget  = service.getTargetforDate(target.getLocation(),target.getFromDate(),context) ;
        if(existingTarget !=null  && existingTarget.getId() != target.getId())  {
            results.add(getErrorforCode(context, TargetErrorCodes.TARGET_EXIST_FORTHIS_PERIOD_LOC,existingTarget.getPeriod()));
        } else {
            existingTarget = service.getTargetforDate(target.getLocation(), target.getToDate(), context);
            if (existingTarget != null && existingTarget.getId() != target.getId()) {
                results.add(getErrorforCode(context, TargetErrorCodes.TARGET_EXIST_FORTHIS_PERIOD_LOC, existingTarget.getPeriod()));
            }
        }


        return results;

    }

     @Override
    public List<RadsError> checkforValueRanges(PrimusModel model, ProductContext context) {

         Target target  =(Target)  model;
         List<RadsError> results = new ArrayList<RadsError>();
         if(!target.getFromDate().before(target.getToDate()))  {
             results.add(getErrorforCode(context, TargetErrorCodes.FROMDATE_LATER_THAN_TO));
         }


         return results ;

    }

    @Override
    public List<RadsError> adaptFromUI(PrimusModel model, ProductContext context) {
       super.adaptFromUI(model,context) ;
       Target target  =(Target)  model;
        List<RadsError> results = new ArrayList<RadsError>();
        StockistService service = ServiceFactory.getStockistService();
        StoreService storeService = ServiceFactory.getStoreService();
        DoctorService doctorService = ServiceFactory.getDoctorService();

       if  (!Utils.isNullCollection(target.getTotalVisitTargets()))  {
           target.getTotalVisitTargets().forEach( visitTarget ->  {
               visitTarget.setTarget(target);
               visitTarget.setCompany(target.getCompany());

               if( visitTarget.getVisitingType() !=null &&  visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_STOCKIST)) {
                   List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + visitTarget.getVisitingEntity() + "'", null, context);
                   if (!Utils.isNullList(stockists)) {
                       visitTarget.setStockist(stockists.get(0).getStockist());
                       visitTarget.setEntityId(stockists.get(0).getStockist().getId());
                       if(stockists.get(0).getStockist().getStockistAssociation().getLocation().getId() !=  target.getLocation().getId() )  {
                           results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, stockists.get(0).getStockist().getName()));
                       }
                   } else
                       results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));
               }
               if(  visitTarget.getVisitingType() !=null && visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_STORE)) {

                   List<StoreAssociation> datas = ( List<StoreAssociation> ) storeService.fetchAllLinked(" where store.name ='" + visitTarget.getVisitingEntity() +"'",null, context) ;
                   if(!Utils.isNullList(datas)) {
                       if(datas.get(0).getStore().getStoreAssociation().getLocation().getId() !=  target.getLocation().getId() )  {
                           results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, datas.get(0).getStore().getName()));
                       }
                       visitTarget.setStore(datas.get(0).getStore());
                       visitTarget.setEntityId(datas.get(0).getStore().getId());
                   }else
                       results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
               }
               if( visitTarget.getVisitingType() !=null && visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_DOCTOR)) {
                   List<DoctorAssociation> datas = ( List<DoctorAssociation> ) doctorService.fetchAllLinked(" where doctor.name ='" + visitTarget.getVisitingEntity() +"'",null, context) ;
                   if(!Utils.isNullList(datas)) {
                       if(datas.get(0).getDoctor().getDoctorAssociation().getLocation().getId() !=  target.getLocation().getId() )  {
                           results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, datas.get(0).getDoctor().getName()));
                       }
                       visitTarget.setDoctor(datas.get(0).getDoctor());
                       visitTarget.setEntityId(datas.get(0).getDoctor().getId());
                   }else
                       results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));

               }
           } );
       }

        if  (!Utils.isNullCollection(target.getAgentSaleTargets()))  {
            AgentSaleTarget agentSaleTarget = (AgentSaleTarget) target.getAgentSaleTargets().stream().findFirst().orElse(null);
            if (target.getAgentSaleTargets().size()  == 1  && (agentSaleTarget.getAgent() ==null ||  agentSaleTarget.getAgent().getUserId() == null )) {
                target.setAgentVisitTargets(null);
            }
            target.getAgentSaleTargets().forEach(agentSaleTarget1 ->  {
                agentSaleTarget1.setTarget(target);
                agentSaleTarget1.setCompany(target.getCompany());
                if  (agentSaleTarget1.getAgent() == null  || Utils.isNullString(agentSaleTarget1.getAgent().getUserId()) ) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Agent"));
                }
                if (agentSaleTarget1.getTargettedAmount() == null || agentSaleTarget1.getTargettedAmount().floatValue()  <= 0 ) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Target_Amount"));
                }

            });

        }

        if  (!Utils.isNullCollection(target.getItemSaleTargets()))  {
            ItemSaleTarget itemSaleTarget = (ItemSaleTarget) target.getItemSaleTargets().stream().findFirst().orElse(null);
            if (target.getItemSaleTargets().size()  == 1  && (itemSaleTarget.getItem() ==null ||  itemSaleTarget.getItem().getName() == null )) {
                target.setItemSaleTargets(null);
            }
            target.getItemSaleTargets().forEach(itemSaleTarget1 ->  {
                itemSaleTarget1.setTarget(target);
                itemSaleTarget1.setCompany(target.getCompany());
                if  (itemSaleTarget1.getItem() == null  || Utils.isNullString(itemSaleTarget1.getItem().getName()) ) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Item"));
                }else {
                    ItemService itemService = ServiceFactory.getItemService() ;
                    Item item = (Item)itemService.fetchOneActive( " where name= '" + itemSaleTarget1.getItem().getName() +"'" ,"",context);
                    if (item== null ) {
                        results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Item"));
                    }else
                        itemSaleTarget1.setItem(item);
                }
                if (itemSaleTarget1.getTargettedAmount() == null || itemSaleTarget1.getTargettedAmount().floatValue()  <= 0 ) {
                    results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Target_Amount"));
                }

            });

        }

        if  (!Utils.isNullCollection(target.getAgentVisitTargets()))  {
            AgentVisitTarget agentVisitTarget = (AgentVisitTarget) target.getAgentVisitTargets().stream().findFirst().orElse(null);
           if  (agentVisitTarget.getAgent().getUserId() == null && target.getAgentVisitTargets().size() ==1   )  {
                // do nothingu
               target.setAgentVisitTargets(null);
            } else {
               target.getAgentVisitTargets().forEach(visitTarget -> {
                   visitTarget.setTarget(target);
                   visitTarget.setCompany(target.getCompany());
                   if  (visitTarget.getAgent() == null  || Utils.isNullString(visitTarget.getAgent().getUserId()) ) {
                       results.add(getErrorforCode(context, CommonErrorCodes.CANNOT_BE_EMPTY, "Agent"));
                   }
                   if (visitTarget.getVisitingType() != null && visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_STOCKIST)) {
                       List<StockistAssociation> stockists = (List<StockistAssociation>) service.fetchAllLinked(" where stockist.name ='" + visitTarget.getVisitingEntity() + "'", null, context);
                       if (!Utils.isNullList(stockists)) {
                           if (stockists.get(0).getStockist().getStockistAssociation().getLocation().getId() != target.getLocation().getId()) {
                               results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, stockists.get(0).getStockist().getName()));
                           }
                           visitTarget.setStockist(stockists.get(0).getStockist());
                           visitTarget.setEntityId(stockists.get(0).getId());
                       } else
                           results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Stockist"));
                   }
                   if (visitTarget.getVisitingType() != null && visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_STORE)) {

                       List<StoreAssociation> datas = (List<StoreAssociation>) storeService.fetchAllLinked(" where store.name ='" + visitTarget.getVisitingEntity() + "'", null, context);
                       if (!Utils.isNullList(datas)) {
                           if (datas.get(0).getStore().getStoreAssociation().getLocation().getId() != target.getLocation().getId()) {
                               results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, datas.get(0).getStore().getName()));
                           }
                           visitTarget.setStore(datas.get(0).getStore());
                           visitTarget.setEntityId(datas.get(0).getId());
                       } else
                           results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Store"));
                   }
                   if (visitTarget.getVisitingType() != null && visitTarget.getVisitingType().equals(FVConstants.VISIT_TO.IND_DOCTOR)) {
                       List<DoctorAssociation> datas = (List<DoctorAssociation>) doctorService.fetchAllLinked(" where doctor.name ='" + visitTarget.getVisitingEntity() + "'", null, context);
                       if (!Utils.isNullList(datas)) {
                           if (datas.get(0).getDoctor().getDoctorAssociation().getLocation().getId() != target.getLocation().getId()) {
                               results.add(getErrorforCode(context, TargetErrorCodes.ENTITY_IN_DIFFERENT_LOCATION, datas.get(0).getDoctor().getName()));
                           }
                           visitTarget.setDoctor(datas.get(0).getDoctor());
                           visitTarget.setEntityId(datas.get(0).getId());
                       } else
                           results.add(getErrorforCode(context, CommonErrorCodes.NOT_FOUND, "Doctor"));

                   }
               });
           }
        }

       return results;
    }
}